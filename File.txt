import time
import os
import asyncio
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import re

# --- Настройки ---
# Ваш токен бота
TELEGRAM_BOT_TOKEN = 'ВАШ_ТОКЕН_БОТА'

# ID чата или канала
TELEGRAM_CHAT_ID = 'ВАШ_CHAT_ID'

# Путь к файлу логов Minecraft
LOG_FILE_PATH = os.path.join(os.getenv('APPDATA'), '.minecraft', 'logs', 'latest.log')

# Путь к файлу для хранения заглушенных игроков
MUTED_PLAYERS_FILE = 'muted_players.txt'

# Список игроков, сообщения которых игнорируются
muted_players = set()

def load_muted_players():
    """Загружает список заглушенных игроков из файла."""
    if os.path.exists(MUTED_PLAYERS_FILE):
        with open(MUTED_PLAYERS_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                muted_players.add(line.strip())
    print(f"Загружено заглушенных игроков: {muted_players}")

def save_muted_players():
    """Сохраняет список заглушенных игроков в файл."""
    with open(MUTED_PLAYERS_FILE, 'w', encoding='utf-8') as f:
        for player in muted_players:
            f.write(f"{player}\n")
    print(f"Список заглушенных игроков сохранен: {muted_players}")


async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /mute."""
    # Проверяем, что команда пришла из нужного чата
    if str(update.effective_chat.id) != TELEGRAM_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("Используйте: /mute <ник_игрока>")
        return

    player_to_mute = context.args[0]
    muted_players.add(player_to_mute)
    save_muted_players()
    await update.message.reply_text(f"Игрок '{player_to_mute}' заглушен.")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /unmute."""
    # Проверяем, что команда пришла из нужного чата
    if str(update.effective_chat.id) != TELEGRAM_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("Используйте: /unmute <ник_игрока>")
        return

    player_to_unmute = context.args[0]
    if player_to_unmute in muted_players:
        muted_players.remove(player_to_unmute)
        save_muted_players()
        await update.message.reply_text(f"Игрок '{player_to_unmute}' разглушен.")
    else:
        await update.message.reply_text(f"Игрок '{player_to_unmute}' не был заглушен.")

async def monitor_logs(bot, chat_id, file_path):
    """Следит за новыми строками в лог-файле и отправляет их в Telegram."""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            file.seek(0, os.SEEK_END)

            print("Бот готов. Ожидаю сообщений в логах Minecraft...")

            while True:
                line = file.readline()
                if not line:
                    await asyncio.sleep(1)
                    continue

                if "[CHAT]" in line:
                    chat_message = line.split('[CHAT] ')[-1].strip()
                    # Извлекаем ник игрока для проверки
                    player_name = chat_message.split(':', 1)[0].strip()

                    # Если игрок не заглушен, отправляем сообщение
                    if player_name not in muted_players:
                        await bot.send_message(chat_id=chat_id, text=chat_message)
                        
    except FileNotFoundError:
        print(f"Ошибка: Файл не найден по пути: {file_path}")
    except Exception as e:
        print(f"Произошла ошибка при чтении файла: {e}")

async def main():
    """Основная функция для запуска асинхронного цикла."""
    if not all([TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("Ошибка: Укажите TELEGRAM_BOT_TOKEN и TELEGRAM_CHAT_ID в настройках.")
        return

    # Загружаем список заглушенных игроков при старте
    load_muted_players()

    # Создаем Application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Регистрируем обработчики команд
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))

    # Запускаем мониторинг логов в отдельной задаче
    bot_instance = Bot(token=TELEGRAM_BOT_TOKEN)
    asyncio.create_task(monitor_logs(bot_instance, TELEGRAM_CHAT_ID, LOG_FILE_PATH))

    # Запускаем бота, который будет ждать команды
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
