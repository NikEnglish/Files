import requests
import re
import json
import asyncio
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7405848829:AAHxDv0DP_Co512vOvGw_PDsXYDjE4fgOJ0"

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
HEADMAN_ID = 5013216284  # –°—Ç–∞—Ä–æ—Å—Ç–∞
HEADMAN_USERNAME = "@kimertuzz3"
DEPUTY_HEADMAN_ID = 1775957387  # –ó–∞–º —Å—Ç–∞—Ä–æ—Å—Ç—ã
DEPUTY_HEADMAN_USERNAME = "@imya_polbzovatela"

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
users_db = {}
suggestions_db = []
homeworks_db = []
info_db = []
last_schedule = None

# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π
background_task_running = True

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ (UTC+5)
YEKATERINBURG_TZ = timezone(timedelta(hours=5))

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    users_db[user_id] = {
        'first_name': user.first_name,
        'username': user.username,
        'last_name': user.last_name,
        'last_start': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
    await show_main_menu(update, user_id)

async def show_main_menu(update, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id == HEADMAN_ID:
        keyboard = [
            ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìù –î–ó'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'],
            ['üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –≤—Å–µ–º', 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é']
        ]
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°—Ç–∞—Ä–æ—Å—Ç–∞! üëë"
    elif user_id == DEPUTY_HEADMAN_ID:
        keyboard = [
            ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìù –î–ó'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'],
            ['üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –≤—Å–µ–º', 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é']
        ]
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ó–∞–º –°—Ç–∞—Ä–æ—Å—Ç—ã! ‚≠ê"
    else:
        keyboard = [
            ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìù –î–ó'],
            ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –°—Ç–∞—Ä–æ—Å—Ç–æ–π', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ó–∞–º–æ–º'],
            ['üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é']
        ]
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá"
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if isinstance(update, Update):
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.edit_message_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (context.user_data.get('awaiting_homework') or 
        context.user_data.get('awaiting_information') or 
        context.user_data.get('awaiting_suggestion') or
        context.user_data.get('awaiting_homework_delete')):
        await handle_special_states(update, context)
        return
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        await show_schedule_periods(update, user_id)
    
    elif text == 'üìù –î–ó':
        await show_homework(update, user_id)
    
    elif text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await show_information_admin(update, user_id)
    
    elif text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await show_information_user(update, user_id)
    
    elif text == 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await show_suggestions(update, user_id)
    
    elif text == 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –≤—Å–µ–º' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_homework_details(update, context)
    
    elif text == 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_information_details(update, context)
    
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_homework_delete(update, context)
    
    elif text == 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –°—Ç–∞—Ä–æ—Å—Ç–æ–π' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await contact_headman(update)
    
    elif text == 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ó–∞–º–æ–º' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await contact_deputy(update)
    
    elif text == 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await suggest_idea(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    elif text in ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞', 'üìÖ –ù–µ–¥–µ–ª—è', 'üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']:
        await handle_schedule_period(update, context)
    
    elif text == 'üîô –ù–∞–∑–∞–¥':
        await show_main_menu(update, user_id)
    
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá")

async def ask_homework_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –î–ó –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    context.user_data['awaiting_homework'] = True
    await update.message.reply_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –î–ó</b>\n\n"
        "–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ü—Ä–µ–¥–º–µ—Ç</b>\n"
        "<b>–ó–∞–¥–∞–Ω–∏–µ</b>\n"
        "<b>–°—Ä–æ–∫ —Å–¥–∞—á–∏</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n"
        "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 45\n"
        "–î–æ 15.09",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )

async def ask_information_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º"""
    context.user_data['awaiting_information'] = True
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ–º</b>\n\n"
        "–ù–∞–ø–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )

async def ask_homework_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –î–ó –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not homeworks_db:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    context.user_data['awaiting_homework_delete'] = True
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –î–ó —Å –Ω–æ–º–µ—Ä–∞–º–∏
    hw_list = "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –î–ó</b>\n\n"
    for i, hw in enumerate(homeworks_db, 1):
        hw_list += f"{i}. {hw['subject']} - {hw['task'][:30]}...\n"
    
    hw_list += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –î–ó –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É):"
    
    await update.message.reply_text(
        hw_list,
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )

async def handle_special_states(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if context.user_data.get('awaiting_homework'):
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            context.user_data['awaiting_homework'] = False
            await show_main_menu(update, user_id)
            return
        
        lines = text.split('\n')
        if len(lines) >= 3:
            subject = lines[0].strip()
            task = lines[1].strip()
            deadline = lines[2].strip()
            
            homework = {
                'subject': subject,
                'task': task,
                'deadline': deadline,
                'date_added': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'added_by': user_id
            }
            homeworks_db.append(homework)
            
            await send_homework_to_all(context.bot, homework)
            
            context.user_data['awaiting_homework'] = False
            keyboard = [
                ['üìù –î–ó', 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –≤—Å–µ–º'],
                ['üîô –ù–∞–∑–∞–¥']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "‚úÖ –î–ó —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º!",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏: –ø—Ä–µ–¥–º–µ—Ç, –∑–∞–¥–∞–Ω–∏–µ, —Å—Ä–æ–∫")
    
    elif context.user_data.get('awaiting_information'):
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            context.user_data['awaiting_information'] = False
            await show_main_menu(update, user_id)
            return
        
        info = {
            'text': text,
            'date_added': datetime.now().strftime('%d.%m.%Y %H:%M'),
            'added_by': user_id
        }
        info_db.append(info)
        
        await send_information_to_all(context.bot, info)
        
        context.user_data['awaiting_information'] = False
        keyboard = [
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'],
            ['üîô –ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º!",
            reply_markup=reply_markup
        )
    
    elif context.user_data.get('awaiting_suggestion'):
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            context.user_data['awaiting_suggestion'] = False
            await show_main_menu(update, user_id)
            return
        
        suggestion = {
            'user_id': user_id,
            'text': text,
            'date': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        suggestions_db.append(suggestion)
        
        user = update.effective_user
        sender_info = f"{user.first_name} (@{user.username})" if user.username else user.first_name
        
        try:
            await context.bot.send_message(
                HEADMAN_ID,
                f"üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{text}\n\nüìÖ {suggestion['date']}"
            )
            await context.bot.send_message(
                DEPUTY_HEADMAN_ID, 
                f"üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{text}\n\nüìÖ {suggestion['date']}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        context.user_data['awaiting_suggestion'] = False
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=ReplyKeyboardMarkup([['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'], ['üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é']], resize_keyboard=True)
        )
    
    elif context.user_data.get('awaiting_homework_delete'):
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            context.user_data['awaiting_homework_delete'] = False
            await show_main_menu(update, user_id)
            return
        
        try:
            hw_number = int(text)
            if 1 <= hw_number <= len(homeworks_db):
                deleted_hw = homeworks_db.pop(hw_number - 1)
                context.user_data['awaiting_homework_delete'] = False
                
                keyboard = [
                    ['üìù –î–ó', '‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó'],
                    ['üîô –ù–∞–∑–∞–¥']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"‚úÖ –î–ó ‚Ññ{hw_number} —É–¥–∞–ª–µ–Ω–æ!\n"
                    f"üìö {deleted_hw['subject']}\n"
                    f"üìã {deleted_hw['task'][:50]}...",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –î–ó. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É (–Ω–æ–º–µ—Ä –î–ó):")

async def send_homework_to_all(bot, homework):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –î–ó –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    homework_text = (
        f"üìù <b>–ù–û–í–û–ï –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï</b>\n\n"
        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {homework['subject']}\n"
        f"üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {homework['task']}\n"
        f"‚è∞ <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {homework['deadline']}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {homework['date_added']}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É 'üìù –î–ó' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"
    )
    
    sent_count = 0
    for user_id in users_db:
        try:
            await bot.send_message(user_id, homework_text, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    print(f"–î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

async def send_information_to_all(bot, information):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    info_text = (
        f"üì¢ <b>–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n\n"
        f"{information['text']}\n\n"
        f"üìÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {information['date_added']}"
    )
    
    sent_count = 0
    for user_id in users_db:
        try:
            await bot.send_message(user_id, info_text, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

async def show_homework(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –î–ó —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not homeworks_db:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    hw_text = "üìù <b>–í–°–ï –î–û–ú–ê–®–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>\n\n"
    
    for i, hw in enumerate(homeworks_db, 1):
        hw_text += (
            f"üîπ <b>–ó–∞–¥–∞–Ω–∏–µ {i}</b>\n"
            f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {hw['subject']}\n"
            f"üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {hw['task']}\n"
            f"‚è∞ <b>–°—Ä–æ–∫:</b> {hw['deadline']}\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {hw['date_added']}\n\n"
        )
    
    hw_text += f"üìä <b>–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π:</b> {len(homeworks_db)}"
    
    # –†–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        keyboard = [
            ['‚ùå –£–¥–∞–ª–∏—Ç—å –î–ó', 'üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó –≤—Å–µ–º'],
            ['üîô –ù–∞–∑–∞–¥']
        ]
    else:
        keyboard = [['üîô –ù–∞–∑–∞–¥']]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(hw_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_information_admin(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    info_text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</b>\n\n"
        f"üëë <b>–°—Ç–∞—Ä–æ—Å—Ç–∞</b>: {HEADMAN_USERNAME}\n"
        f"‚≠ê <b>–ó–∞–º —Å—Ç–∞—Ä–æ—Å—Ç—ã</b>: {DEPUTY_HEADMAN_USERNAME}\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> {len(users_db)}"
    )
    
    keyboard = [
        ['üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', 'üîô –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_information_user(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not info_db:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return
    
    recent_info = info_db[-3:] if len(info_db) > 3 else info_db
    
    info_text = "‚ÑπÔ∏è <b>–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n\n"
    
    for i, info in enumerate(recent_info, 1):
        info_text += (
            f"üîπ <b>–°–æ–æ–±—â–µ–Ω–∏–µ {i}</b>\n"
            f"{info['text']}\n"
            f"üìÖ {info['date_added']}\n\n"
        )
    
    keyboard = [['üîô –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_suggestions(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤"""
    if not suggestions_db:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤")
        return
    
    suggestions_text = "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
    for i, suggestion in enumerate(suggestions_db, 1):
        user_info = users_db.get(suggestion['user_id'], {})
        username = user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        suggestions_text += f"{i}. {suggestion['text']}\nüë§ {username} | üìÖ {suggestion['date']}\n\n"
    
    keyboard = [['üîô –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(suggestions_text, parse_mode='HTML', reply_markup=reply_markup)

async def contact_headman(update: Update):
    """–°–≤—è–∑—å —Å–æ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π"""
    contact_text = (
        "üëë <b>–°–≤—è–∑—å —Å–æ –°—Ç–∞—Ä–æ—Å—Ç–æ–π</b>\n\n"
        f"üìû Telegram: {HEADMAN_USERNAME}\n"
    )
    await update.message.reply_text(contact_text, parse_mode='HTML')

async def contact_deputy(update: Update):
    """–°–≤—è–∑—å —Å –∑–∞–º —Å—Ç–∞—Ä–æ—Å—Ç—ã"""
    contact_text = (
        "‚≠ê <b>–°–≤—è–∑—å —Å –ó–∞–º–æ–º –°—Ç–∞—Ä–æ—Å—Ç—ã</b>\n\n"
        f"üìû Telegram: {DEPUTY_HEADMAN_USERNAME}\n"
    )
    await update.message.reply_text(contact_text, parse_mode='HTML')

async def suggest_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞"""
    context.user_data['awaiting_suggestion'] = True
    await update.message.reply_text(
        "üí° –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )

async def show_schedule_periods(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = [
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞'],
        ['üìÖ –ù–µ–¥–µ–ª—è', 'üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        ['üîô –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)

async def handle_schedule_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text in ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞', 'üìÖ –ù–µ–¥–µ–ª—è', 'üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']:
        schedule = get_schedule(text)
        await update.message.reply_text(schedule, parse_mode='HTML')
    elif text == 'üîô –ù–∞–∑–∞–¥':
        await show_main_menu(update, user_id)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö üëá")

def get_schedule(period):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        schedule_data = fetch_schedule_data()
        if not schedule_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"

        group = "–ò–î-127"
        if group not in schedule_data:
            return f"‚ùå –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}"

        lessons = schedule_data[group]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        now_yekat = datetime.now(YEKATERINBURG_TZ)
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: {now_yekat}")
        print(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: {now_yekat.date()}")
        print(f"–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(lessons)}")
        
        if period == 'üìÖ –°–µ–≥–æ–¥–Ω—è':
            filtered_lessons = filter_today_lessons(lessons)
            title = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            print(f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {len(filtered_lessons)}")
        elif period == 'üìÖ –ó–∞–≤—Ç—Ä–∞':
            filtered_lessons = filter_tomorrow_lessons(lessons)
            title = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
            print(f"–ó–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {len(filtered_lessons)}")
        elif period == 'üìÖ –ù–µ–¥–µ–ª—è':
            filtered_lessons = filter_week_lessons(lessons)
            title = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
        else:
            filtered_lessons = lessons
            title = "üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"

        if not filtered_lessons:
            return f"‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {period}"

        return format_schedule(filtered_lessons, title)

    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

def fetch_schedule_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞"""
    try:
        url = "https://pmk-online.ru/students/schedule/"
        
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        html = resp.text

        match = re.search(r"const scheduleData\s*=\s*(\{.*?\});", html, re.S)
        if not match:
            return None

        schedule_raw = match.group(1)
        schedule_json_str = schedule_raw.replace(";", "")
        return json.loads(schedule_json_str)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

def filter_today_lessons(lessons):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    print(f"–ò—â–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥): {today_yekat}")
    
    result = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ).date()
            
            if lesson_date_yekat == today_yekat:
                result.append(lesson)
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {lesson_date_str} -> {lesson_date_yekat} - {lesson.get('subjectFull')}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
            continue
    
    return result

def filter_tomorrow_lessons(lessons):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"""
    tomorrow_yekat = (datetime.now(YEKATERINBURG_TZ) + timedelta(days=1)).date()
    print(f"–ò—â–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥): {tomorrow_yekat}")
    
    result = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ).date()
            
            if lesson_date_yekat == tomorrow_yekat:
                result.append(lesson)
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {lesson_date_str} -> {lesson_date_yekat} - {lesson.get('subjectFull')}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
            continue
    
    return result

def filter_week_lessons(lessons):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"""
    today_yekat = datetime.now(YEKATERINBURG_TZ)
    week_end = today_yekat + timedelta(days=7)
    
    week_lessons = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            
            if today_yekat.date() <= lesson_date_yekat.date() <= week_end.date():
                week_lessons.append(lesson)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
            continue
    
    return week_lessons

def get_lesson_time(lesson_number):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    lesson_times = {
        1: ("08:30", "10:05"),
        2: ("10:15", "11:50"), 
        3: ("12:40", "14:15"),
        4: ("14:25", "16:00"),
        5: ("16:10", "17:45"),
        6: ("17:55", "19:30"),
    }
    return lesson_times.get(lesson_number, ("‚ùì", "‚ùì"))

def format_schedule(lessons, title):
    if not lessons:
        return "‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
    lessons.sort(key=lambda x: (x['date'], x.get('lessonNumber', 0)))
    
    result = [f"<b>{title}</b>\n", "<b>–ì—Ä—É–ø–ø–∞: –ò–î-127</b>\n"]
    
    current_date = None
    for lesson in lessons:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –≤ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ
            lesson_date_utc = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            
            date_str = lesson_date_yekat.strftime('%d.%m.%Y')
            
            if date_str != current_date:
                current_date = date_str
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                day_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                day_of_week = day_names[lesson_date_yekat.weekday()]
                result.append(f"\nüìÖ <b>{date_str} ({day_of_week})</b>")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
            lesson_number = lesson.get('lessonNumber', 0)
            start_time, end_time = get_lesson_time(lesson_number)
            
            lesson_text = (
                f"    ‚è∞ {start_time}-{end_time} | {lesson_number} –ø–∞—Ä–∞\n"
                f"    üìö {lesson['subjectFull']}\n"
                f"    üë®‚Äçüè´ {lesson.get('teacher', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"    üö™ {lesson['room']}\n"
            )
            result.append(lesson_text)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            continue
    
    result.append(f"\nüìä <b>–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π:</b> {len(lessons)}")
    return "\n".join(result)

async def send_daily_schedule(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ 19:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É"""
    global background_task_running
    
    while background_task_running:
        try:
            now = datetime.now(YEKATERINBURG_TZ)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–π—á–∞—Å 19:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É?
            if now.hour == 19 and now.minute == 0:
                print(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! {now}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                schedule_data = fetch_schedule_data()
                if schedule_data and "–ò–î-127" in schedule_data:
                    lessons = schedule_data["–ò–î-127"]
                    tomorrow_lessons = filter_tomorrow_lessons(lessons)
                    
                    if tomorrow_lessons:
                        schedule_text = format_schedule(tomorrow_lessons, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        sent_count = 0
                        for user_id in users_db:
                            try:
                                await bot.send_message(user_id, schedule_text, parse_mode='HTML')
                                sent_count += 1
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
                        print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ {now}")
                    else:
                        print("‚ÑπÔ∏è –ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(60)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await asyncio.sleep(60)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 19:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    background_task = asyncio.create_task(send_daily_schedule(app.bot))
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await background_task
        
    except asyncio.CancelledError:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        global background_task_running
        background_task_running = False
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
