import sqlite3
import re
import json
import asyncio
import requests
import os
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# -------------------- CONSTANTS AND SETTINGS --------------------
BOT_TOKEN = "7405848829:AAHxDv0DP_Co512vOvGw_PDsXYDjE4fgOJ0"
YEKATERINBURG_TZ = timezone(timedelta(hours=5))
DEFAULT_GROUP = "ИД-127"

# States for ConversationHandler
AWAITING_HOMEWORK, AWAITING_INFO, AWAITING_SPORT, AWAITING_SUGGESTION, AWAITING_HOMEWORK_DELETE, AWAITING_INFO_DELETE, AWAITING_GROUP, AWAITING_USER_DELETE, AWAITING_SUGGESTION_DELETE, AWAITING_SPORT_DELETE = range(10)

# User Roles
ROLE_STUDENT = 'student'
ROLE_PHYSICAL_ORGANIZER = 'physical_organizer'
ROLE_IT_SPECIALIST = 'it_specialist'

# Special Users (ID and username)
DEVELOPER_ID = 1775957387
SPECIAL_USERS = {
    5013216284: {'role': ROLE_IT_SPECIALIST, 'username': '@kimertuzz3', 'name': 'Староста'},
    DEVELOPER_ID: {'role': ROLE_IT_SPECIALIST, 'username': '@imya_polbzovatela', 'name': 'Зам Старосты'},
    5078637058: {'role': ROLE_PHYSICAL_ORGANIZER, 'username': '@NateDiazFight', 'name': 'Физ. орг.'}
}

# Full list of groups
ALL_GROUPS = [
    "ИД-126", "ИД-127", "МД-1126", "МД-1127", "МД-1128", "ОДЛД-107", "ОДЛД-108",
    "ПСД-144", "ПСД-145", "ТД-1128", "ТД-1129", "ТД-1130", "ТМД-123", "ТМД-124", "ТМД-125",
    "ЭД-1111", "ЭД-1112", "ЭД-1113", "ИД-224", "ИД-225", "МД-2123", "МД-2124", "МД-2125",
    "ОдЛД-205", "ОдЛД-206", "ПСД-242", "ПСД-243", "ТД-2125", "ТД-2126", "ТД-2127", "ТМД-220",
    "ТМД-221", "ТМД-222", "ЭД-2108", "ЭД-2109", "ЭД-2110", "ИД-323", "МД-3121", "МД-3122",
    "ОСАД-302", "ОдЛД-303", "ОдЛД-304", "ПСД-340", "ПСД-341", "ТД-3121", "ТД-3123", "ТМД-317",
    "ТМД-318", "ЭД-3106", "ЭД-3107", "ИД-421", "ИД-422"
]

# Schedule cache
schedule_cache = {}
last_schedule_check = None

# -------------------- DATABASE FUNCTIONS --------------------

def init_db():
    """Initializes the database"""
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    
    # Users table
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        group_name TEXT,
        role TEXT DEFAULT 'student',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    # Homeworks table
    cur.execute('''CREATE TABLE IF NOT EXISTS homeworks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        subject TEXT,
        task TEXT,
        deadline TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Notifications table (from IT specialists)
    cur.execute('''CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Sport notifications table (from physical organizer)
    cur.execute('''CREATE TABLE IF NOT EXISTS sport_notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Suggestions table
    cur.execute('''CREATE TABLE IF NOT EXISTS suggestions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    conn.commit()
    conn.close()
    print("ЛОГ: База данных инициализирована.")

def get_db_connection():
    """Creates a connection to the database"""
    conn = sqlite3.connect('bot_data.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_user(user_id):
    """Gets user information"""
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    conn.close()
    return user

def get_all_users():
    """Gets a list of all users"""
    conn = get_db_connection()
    users = conn.execute('SELECT user_id, first_name, username, group_name FROM users').fetchall()
    conn.close()
    return users

def add_user(user_id, username, first_name, last_name):
    """Adds a new user to the database or updates existing user"""
    conn = get_db_connection()
    
    existing_user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    
    # Определяем роль пользователя
    role = ROLE_STUDENT
    if user_id in SPECIAL_USERS:
        role = SPECIAL_USERS[user_id]['role']
    
    if not existing_user:
        # Добавляем нового пользователя
        conn.execute('''INSERT INTO users (user_id, username, first_name, last_name, group_name, role)
                     VALUES (?, ?, ?, ?, ?, ?)''',
                     (user_id, username, first_name, last_name, DEFAULT_GROUP, role))
        print(f"ЛОГ: Добавлен новый пользователь: {first_name} (ID: {user_id}) с группой {DEFAULT_GROUP} и ролью {role}")
    else:
        # Обновляем существующего пользователя (особенно роль, если изменилась)
        conn.execute('''UPDATE users 
                     SET username = ?, first_name = ?, last_name = ?, role = ?
                     WHERE user_id = ?''',
                     (username, first_name, last_name, role, user_id))
        print(f"ЛОГ: Обновлен пользователь: {first_name} (ID: {user_id}), роль: {role}")
    
    conn.commit()
    conn.close()

def update_user_group(user_id, group_name):
    """Updates the user's group"""
    conn = get_db_connection()
    conn.execute('UPDATE users SET group_name = ? WHERE user_id = ?', (group_name, user_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} сменил группу на {group_name}")
    
def get_total_user_count():
    """Gets the total number of users in the database"""
    conn = get_db_connection()
    count = conn.execute('SELECT COUNT(*) FROM users').fetchone()[0]
    conn.close()
    return count
    
# Deletion Functions
def delete_homework(hw_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM homeworks WHERE id = ?', (hw_id,))
    conn.commit()
    conn.close()

def delete_notification(notif_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM notifications WHERE id = ?', (notif_id,))
    conn.commit()
    conn.close()

def delete_sport_notification(notif_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM sport_notifications WHERE id = ?', (notif_id,))
    conn.commit()
    conn.close()

def delete_user(user_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} удален из базы данных.")

def delete_suggestion(suggestion_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM suggestions WHERE id = ?', (suggestion_id,))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Предложение {suggestion_id} удалено из базы данных.")

def get_all_sport_notifications():
    """Gets all sport notifications"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT s.*, u.first_name 
                                 FROM sport_notifications s JOIN users u ON s.added_by = u.user_id 
                                 ORDER BY s.created_at DESC''').fetchall()
    conn.close()
    return notifications

# -------------------- SCHEDULE FUNCTIONS --------------------

def fetch_schedule_data():
    """Fetches schedule data from the website"""
    try:
        url = "https://pmk-online.ru/students/schedule/"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        html = resp.text

        match = re.search(r"const scheduleData\s*=\s*(\{.*?\});", html, re.S)
        if not match:
            print("ОШИБКА: Не удалось найти scheduleData на сайте.")
            return None

        schedule_raw = match.group(1)
        schedule_json_str = schedule_raw.replace(";", "")
        return json.loads(schedule_json_str)
    
    except Exception as e:
        print(f"ОШИБКА: Не удалось загрузить расписание: {e}")
        return None

def filter_today_lessons(lessons):
    """Filters lessons for today considering Yekaterinburg time"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    return [lesson for lesson in lessons if lesson.get('date') and datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() == today_yekat]

def filter_tomorrow_lessons(lessons):
    """Filters lessons for tomorrow considering Yekaterinburg time"""
    tomorrow_yekat = (datetime.now(YEKATERINBURG_TZ) + timedelta(days=1)).date()
    return [lesson for lesson in lessons if lesson.get('date') and datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() == tomorrow_yekat]

def filter_week_lessons(lessons):
    """Filters lessons for the week considering Yekaterinburg time"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    week_end = today_yekat + timedelta(days=7)
    return [lesson for lesson in lessons if lesson.get('date') and today_yekat <= datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() <= week_end]

def get_lesson_time(lesson_number):
    """Returns the time of a lesson by its number"""
    lesson_times = {
        1: ("08:30", "10:05"), 2: ("10:15", "11:50"), 3: ("12:40", "14:15"),
        4: ("14:25", "16:00"), 5: ("16:10", "17:45"), 6: ("17:55", "19:30"),
    }
    return lesson_times.get(lesson_number, ("❓", "❓"))

def format_schedule(lessons, title):
    if not lessons:
        return "✅ Нет занятий"
    
    lessons.sort(key=lambda x: (x.get('date', ''), x.get('lessonNumber', 0)))
    
    result = [f"<b>{title}</b>\n"]
    current_date = None
    for lesson in lessons:
        try:
            lesson_date_utc = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            date_str = lesson_date_yekat.strftime('%d.%m.%Y')
            
            if date_str != current_date:
                current_date = date_str
                day_names = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
                day_of_week = day_names[lesson_date_yekat.weekday()]
                result.append(f"\n📅 <b>{date_str} ({day_of_week})</b>")
            
            lesson_number = lesson.get('lessonNumber', 0)
            start_time, end_time = get_lesson_time(lesson_number)
            
            lesson_text = (
                f"    ⏰ {start_time}-{end_time} | {lesson_number} пара\n"
                f"    📚 {lesson.get('subjectFull', 'N/A')}\n"
                f"    👨‍🏫 {lesson.get('teacher', 'N/A')}\n"
                f"    🚪 {lesson.get('room', 'N/A')}\n"
            )
            result.append(lesson_text)
        except Exception as e:
            print(f"ОШИБКА: Не удалось отформатировать пару: {e}")
            continue
    
    result.append(f"\n📊 <b>Всего занятий:</b> {len(lessons)}")
    return "\n".join(result)

def get_schedule(period, group_name):
    """Gets and formats the schedule for the selected period and group"""
    try:
        global schedule_cache, last_schedule_check
        
        # Check if we need to refresh the cache (every hour)
        now = datetime.now(YEKATERINBURG_TZ)
        if last_schedule_check is None or (now - last_schedule_check).total_seconds() > 3600:
            schedule_data = fetch_schedule_data()
            if schedule_data:
                schedule_cache = schedule_data
                last_schedule_check = now
                print("ЛОГ: Расписание обновлено из интернета")
            else:
                print("ЛОГ: Не удалось обновить расписание, используем кэш")
        else:
            schedule_data = schedule_cache
            print("ЛОГ: Используем кэшированное расписание")
        
        if not schedule_data:
            return "❌ Не удалось загрузить расписание"

        if group_name not in schedule_data:
            return f"❌ Нет расписания для группы {group_name}"

        lessons = schedule_data[group_name]
        
        if period == '📅 Сегодня':
            filtered_lessons = filter_today_lessons(lessons)
            title = f"📅 Расписание на сегодня ({group_name})"
        elif period == '📅 Завтра':
            filtered_lessons = filter_tomorrow_lessons(lessons)
            title = f"📅 Расписание на завтра ({group_name})"
        elif period == '📅 Неделя':
            filtered_lessons = filter_week_lessons(lessons)
            title = f"📅 Расписание на неделю ({group_name})"
        else:
            filtered_lessons = lessons
            title = f"📅 Все расписание ({group_name})"

        if not filtered_lessons:
            return f"✅ Нет занятий для выбранного периода."

        return format_schedule(filtered_lessons, title)

    except Exception as e:
        print(f"ОШИБКА: Произошла ошибка при получении расписания: {str(e)}")
        return f"❌ Произошла ошибка: {str(e)}"

async def check_schedule_changes(context: ContextTypes.DEFAULT_TYPE):
    """Checks for schedule changes and notifies users"""
    global schedule_cache, last_schedule_check
    
    print("ЛОГ: Проверка изменений в расписании...")
    new_schedule = fetch_schedule_data()
    
    if not new_schedule:
        print("ЛОГ: Не удалось проверить изменения расписания")
        return
    
    # Check if schedule has changed
    if schedule_cache != new_schedule:
        print("ЛОГ: Обнаружены изменения в расписании")
        schedule_cache = new_schedule
        last_schedule_check = datetime.now(YEKATERINBURG_TZ)
        
        # Notify all users about changes
        for group_name in new_schedule.keys():
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(
                        user['user_id'],
                        "🔄 Обнаружены изменения в расписании. Используйте команду /start для обновления."
                    )
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить уведомление пользователю {user['user_id']}: {e}")

async def send_daily_schedule(context: ContextTypes.DEFAULT_TYPE):
    """Sends daily schedule at 19:00"""
    print("ЛОГ: Отправка ежедневного расписания...")
    
    # Send tomorrow's schedule
    for group_name in schedule_cache.keys():
        lessons = schedule_cache[group_name]
        tomorrow_lessons = filter_tomorrow_lessons(lessons)
        
        if tomorrow_lessons:
            schedule_text = format_schedule(tomorrow_lessons, f"📅 Расписание на завтра ({group_name})")
            
            # Add homework information
            homeworks = get_homeworks(group_name)
            if homeworks:
                homework_text = "\n\n📝 <b>Домашние задания на завтра:</b>\n"
                for hw in homeworks[:3]:
                    homework_text += f"• {hw['subject']}: {hw['task']} (до {hw['deadline']})\n"
                schedule_text += homework_text
            
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(user['user_id'], schedule_text, parse_mode='HTML')
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить расписание пользователю {user['user_id']}: {e}")

async def send_morning_schedule(context: ContextTypes.DEFAULT_TYPE):
    """Sends morning schedule at 07:00"""
    print("ЛОГ: Отправка утреннего расписания...")
    
    # Send today's schedule
    for group_name in schedule_cache.keys():
        lessons = schedule_cache[group_name]
        today_lessons = filter_today_lessons(lessons)
        
        if today_lessons:
            schedule_text = format_schedule(today_lessons, f"📅 Расписание на сегодня ({group_name})")
            
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(user['user_id'], schedule_text, parse_mode='HTML')
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить расписание пользователю {user['user_id']}: {e}")

async def check_next_lesson(context: ContextTypes.DEFAULT_TYPE):
    """Checks and sends notification about next lesson"""
    print("ЛОГ: Проверка следующей пары...")
    
    now = datetime.now(YEKATERINBURG_TZ)
    current_time = now.time()
    
    for group_name in schedule_cache.keys():
        lessons = schedule_cache[group_name]
        today_lessons = filter_today_lessons(lessons)
        
        if not today_lessons:
            continue
            
        # Find current and next lessons
        for i, lesson in enumerate(today_lessons):
            try:
                lesson_date_utc = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00'))
                lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
                lesson_number = lesson.get('lessonNumber', 0)
                start_time, end_time = get_lesson_time(lesson_number)
                
                # Parse time strings
                end_time_obj = datetime.strptime(end_time, '%H:%M').time()
                
                # Check if lesson just ended (within last minute)
                if (datetime.combine(now.date(), end_time_obj) <= now <= 
                    datetime.combine(now.date(), end_time_obj) + timedelta(minutes=1)):
                    
                    # Check if there's a next lesson
                    if i + 1 < len(today_lessons):
                        next_lesson = today_lessons[i + 1]
                        next_lesson_number = next_lesson.get('lessonNumber', 0)
                        next_start_time, next_end_time = get_lesson_time(next_lesson_number)
                        
                        next_lesson_text = (
                            f"📅 <b>Следующая пара ({group_name})</b>\n\n"
                            f"    ⏰ {next_start_time}-{next_end_time} | {next_lesson_number} пара\n"
                            f"    📚 {next_lesson.get('subjectFull', 'N/A')}\n"
                            f"    👨‍🏫 {next_lesson.get('teacher', 'N/A')}\n"
                            f"    🚪 {next_lesson.get('room', 'N/A')}\n"
                        )
                        
                        users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
                        for user in users:
                            try:
                                await context.bot.send_message(user['user_id'], next_lesson_text, parse_mode='HTML')
                            except Exception as e:
                                print(f"ОШИБКА: Не удалось отправить уведомление о следующей паре пользователю {user['user_id']}: {e}")
            except Exception as e:
                print(f"ОШИБКА: Не удалось обработать пару: {e}")
                continue

# -------------------- CORE BOT FUNCTIONS --------------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user = update.effective_user
    user_id = user.id
    
    add_user(user_id, user.username, user.first_name, user.last_name)
    user_data = get_user(user_id)
    
    # If user doesn't have a valid group, ask for it
    if not user_data or user_data['group_name'] not in ALL_GROUPS:
        return await ask_user_group(update, context)

    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user.id}) вернулся в главное меню.")
    
    # Проверяем, совпадает ли роль в базе с ожидаемой для специальных пользователей
    if user_id in SPECIAL_USERS and user_data['role'] != SPECIAL_USERS[user_id]['role']:
        keyboard = [[InlineKeyboardButton("🔄 Принудительно исправить роль", callback_data=f"fix_role_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "⚠️ Обнаружено несоответствие роли. Нажмите кнопку ниже, чтобы исправить:",
            reply_markup=reply_markup
        )
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def ask_user_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks the user to select their group"""
    keyboard = [ALL_GROUPS[i:i+3] for i in range(0, len(ALL_GROUPS), 3)]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "👋 Выбери свою группу:",
        reply_markup=reply_markup
    )
    
    return AWAITING_GROUP

async def handle_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the user's group selection and ends the conversation"""
    user = update.effective_user
    user_id = user.id
    group_name = update.message.text
    
    if group_name not in ALL_GROUPS:
        await update.message.reply_text(
            "❌ Пожалуйста, выбери группу из списка:",
            reply_markup=ReplyKeyboardMarkup([ALL_GROUPS[i:i+3] for i in range(0, len(ALL_GROUPS), 3)], 
                                           resize_keyboard=True, one_time_keyboard=True)
        )
        print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) ввел неверную группу: {group_name}")
        return AWAITING_GROUP
    
    update_user_group(user_id, group_name)
    
    await update.message.reply_text(
        f"✅ Группа {group_name} сохранена!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) успешно выбрал группу {group_name}.")
    return ConversationHandler.END

async def show_main_menu(update: Update, user_id: int):
    """Displays the main menu based on user rights"""
    user_data = get_user(user_id)
    role = user_data['role']
    
    welcome_text = "👋 Добро пожаловать!"
    
    if user_id in SPECIAL_USERS:
        welcome_text = f"👑 Добро пожаловать, {SPECIAL_USERS[user_id]['name']}!"
    elif role == ROLE_IT_SPECIALIST:
        welcome_text = "👑 Добро пожаловать, Айтишник!"
    elif role == ROLE_PHYSICAL_ORGANIZER:
        welcome_text = "🏃 Добро пожаловать, Физ. орг.!"

    if user_id == DEVELOPER_ID: # Developer-specific menu
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['📢 Отправить ДЗ', '📢 Отправить уведомление'],
            ['Удалить ДЗ', 'Удалить уведомление', 'Удалить предложения'],
            ['Удалить пользователя'],
            ['💰 Дать денюжку'],
            ['🎓 Сменить группу']
        ]
    elif role == ROLE_IT_SPECIALIST:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['📢 Отправить ДЗ', '📢 Отправить уведомление'],
            ['Удалить ДЗ', 'Удалить уведомление', 'Удалить предложения'],
            ['💰 Дать денюжку'],
            ['🎓 Сменить группу']
        ]
    elif role == ROLE_PHYSICAL_ORGANIZER:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['🏃 Отправить спортивное уведомление'],
            ['💰 Дать денюжку'],
            ['🎓 Сменить группу']
        ]
    else: # Student menu
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложить идею'],
            ['💰 Дать денюжку'],
            ['📞 Связаться со старостой', '📞 Связаться с замом старосты'],
            ['📞 Связаться с физоргом'],
            ['🎓 Сменить группу']
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    message_source = update.callback_query.message if update.callback_query else update.message
    await message_source.reply_text(welcome_text, reply_markup=reply_markup)

    print(f"ЛОГ: Главное меню показано для пользователя {user_data['first_name']} (ID: {user_id}).")


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancels the current conversation and returns to the main menu"""
    user = update.effective_user
    user_id = user.id
    
    await update.message.reply_text("Действие отменено.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Диалог отменен пользователем {user.first_name} (ID: {user_id}).")
    return ConversationHandler.END

async def handle_simple_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for simple text messages that don't require a conversation"""
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    user_data = get_user(user_id)
    
    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) отправил сообщение: '{text}'")
    
    if not user_data or user_data['group_name'] not in ALL_GROUPS:
        add_user(user_id, user.username, user.first_name, user.last_name)
        await update.message.reply_text("Пожалуйста, нажми /start и выбери свою группу.")
        return

    role = user_data['role']
    group_name = user_data['group_name']
    
    if text == '📅 Расписание':
        await show_schedule_periods(update, user_id)
    
    elif text == '📝 ДЗ':
        await show_homework(update, group_name)
    
    elif text == 'ℹ️ Информация':
        await show_information(update, group_name, role)

    elif text == '💡 Предложения' and (role in [ROLE_IT_SPECIALIST, ROLE_PHYSICAL_ORGANIZER] or user_id in SPECIAL_USERS):
        await show_suggestions(update)

    elif text == '💰 Дать денюжку':
        donate_text = "Если не жалко, можешь дать разрабу бота денюжку на дальнейшее развитие бота и на покушать😊"
        keyboard = [
            [InlineKeyboardButton("💸 Поддержать автора", url="https://www.donationalerts.com/r/ax_hikitka")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(donate_text, reply_markup=reply_markup)
    
    elif text == '📞 Связаться с физоргом':
        await contact_physical_organizer(update)
    
    elif text == '📞 Связаться со старостой':
        await contact_starosta(update)

    elif text == '📞 Связаться с замом старосты':
        await contact_deputy_starosta(update)
    
    elif text in ['📅 Сегодня', '📅 Завтра', '📅 Неделя', '📅 Все расписание']:
        await handle_schedule_period(update, context, group_name)
    
    elif text == '🔙 Назад':
        await show_main_menu(update, user_id)

    elif text == 'Удалить пользователя' and user_id == DEVELOPER_ID:
        await delete_user_menu(update, context)

    elif text == 'Удалить спортивные уведомления' and (user_id == DEVELOPER_ID or role == ROLE_PHYSICAL_ORGANIZER):
        await delete_sport_notification_menu(update, context)

    else:
        await update.message.reply_text("Используй кнопки для навигации 👇")
        print(f"ЛОГ: Неизвестная команда от {user.first_name} (ID: {user_id}): '{text}'")

# -------------------- SCHEDULE DISPLAY FUNCTIONS --------------------

async def show_schedule_periods(update: Update, user_id: int):
    """Shows the schedule period selection"""
    keyboard = [
        ['📅 Сегодня', '📅 Завтра'],
        ['📅 Неделя', '📅 Все расписание'],
        ['🔙 Назад']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("Выбери период для просмотра расписания:", reply_markup=reply_markup)
    print(f"ЛОГ: Показан выбор периода расписания для пользователя {user_id}.")

async def handle_schedule_period(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str):
    """Handles the schedule period selection"""
    text = update.message.text
    print(f"ЛОГ: Пользователь запросил расписание для периода '{text}'.")
    
    await update.message.reply_text("⏳ Загружаю расписание...", reply_markup=ReplyKeyboardRemove())
    schedule = get_schedule(text, group_name)
    await update.message.reply_text(schedule, parse_mode='HTML')
    await show_main_menu(update, update.effective_user.id) # Return to main menu after showing schedule

# -------------------- DATABASE INTERACTION FUNCTIONS --------------------

def add_homework(subject, task, deadline, group_name, added_by, photo_id=None):
    """Adds homework to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO homeworks (subject, task, deadline, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?, ?, ?)''', (subject, task, deadline, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено ДЗ для группы {group_name}.")

def get_homeworks(group_name):
    """Gets homework for a group"""
    conn = get_db_connection()
    homeworks = conn.execute('''SELECT h.*, u.first_name 
                             FROM homeworks h JOIN users u ON h.added_by = u.user_id 
                             WHERE h.group_name = ? ORDER BY h.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return homeworks

def add_notification(message, group_name, added_by, photo_id=None):
    """Adds a notification to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO notifications (message, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?)''', (message, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено уведомление для группы {group_name}.")

def get_notifications(group_name):
    """Gets notifications for a group"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT n.*, u.first_name 
                                 FROM notifications n JOIN users u ON n.added_by = u.user_id 
                                 WHERE n.group_name = ? ORDER BY n.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return notifications

def add_sport_notification(message, group_name, added_by, photo_id=None):
    """Adds a sport notification to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO sport_notifications (message, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?)''', (message, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено спортивное уведомление для группы {group_name}.")

def get_sport_notifications(group_name):
    """Gets sport notifications for a group"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT s.*, u.first_name 
                                 FROM sport_notifications s JOIN users u ON s.added_by = u.user_id 
                                 WHERE s.group_name = ? ORDER BY s.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return notifications

def add_suggestion(user_id, message):
    """Adds a suggestion to the database"""
    conn = get_db_connection()
    conn.execute('INSERT INTO suggestions (user_id, message) VALUES (?, ?)', (user_id, message))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} отправил предложение.")

def get_suggestions():
    """Gets all suggestions"""
    conn = get_db_connection()
    suggestions = conn.execute('''SELECT s.*, u.first_name, u.username 
                               FROM suggestions s JOIN users u ON s.user_id = u.user_id 
                               ORDER BY s.created_at DESC''').fetchall()
    conn.close()
    return suggestions

# -------------------- MESSAGE SENDING (DIALOG) FUNCTIONS --------------------

async def ask_homework_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for homework details to send"""
    await update.message.reply_text(
        "📝 <b>Добавление нового ДЗ</b>\n\n"
        "Напиши в формате:\n"
        "<b>Предмет</b>\n"
        "<b>Задание</b>\n"
        "<b>Срок сдачи</b>\n\n"
        "Пример:\n"
        "Математика\n"
        "Решить задачи 1-10 на странице 45\n"
        "До 15.09\n\n"
        "Можно прикрепить фото к сообщению",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод ДЗ от пользователя {update.effective_user.id}.")
    return AWAITING_HOMEWORK

async def ask_notification_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for information to send to everyone"""
    await update.message.reply_text(
        "📢 <b>Отправка уведомления всем</b>\n\n"
        "Напиши уведомление, которое нужно отправить всем ученикам.\n"
        "Можно прикрепить фото к сообщению:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод уведомления от пользователя {update.effective_user.id}.")
    return AWAITING_INFO

async def ask_sport_notification_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for a sport notification to send"""
    await update.message.reply_text(
        "🏃 <b>Отправка спортивного уведомления</b>\n\n"
        "Напиши спортивное уведомление, которое нужно отправить всем ученикам.\n"
        "Можно прикрепить фото к сообщению:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод спортивного уведомления от пользователя {update.effective_user.id}.")
    return AWAITING_SPORT

async def ask_suggestion_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for a suggestion to improve the bot"""
    await update.message.reply_text(
        "💡 <b>Предложение по улучшению бота</b>\n\n"
        "Напиши свое предложение по улучшению бота:\n\n"
        "Что бы ты хотел добавить или изменить?",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод предложения от пользователя {update.effective_user.id}.")
    return AWAITING_SUGGESTION

# --- UPDATED MESSAGE HANDLING FUNCTIONS IN DIALOGS ---

async def handle_homework_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    # Проверяем права через SPECIAL_USERS, а не через роль в базе
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_IT_SPECIALIST]:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']
    
    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    text = update.message.caption if update.message.caption else update.message.text
    
    if text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not text:
        await update.message.reply_text("❌ Пожалуйста, добавь описание к ДЗ.")
        return AWAITING_HOMEWORK

    lines = text.strip().split('\n')
    if len(lines) >= 3:
        subject = lines[0].strip()
        task = lines[1].strip()
        deadline = lines[2].strip()
        
        add_homework(subject, task, deadline, group_name, user_id, photo_id)
        await update.message.reply_text("✅ ДЗ добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
        await send_homework_to_all(context.bot, subject, task, deadline, group_name, user_id, photo_id)
        print(f"ЛОГ: ДЗ добавлено пользователем {user_id} для группы {group_name}.")
        
        await show_main_menu(update, user_id)
        return ConversationHandler.END
    else:
        await update.message.reply_text("❌ Неправильный формат. Нужно 3 строки: предмет, задание, срок")
        return AWAITING_HOMEWORK

async def handle_notification_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    # Проверяем права через SPECIAL_USERS, а не через роль в базе
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_IT_SPECIALIST]:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']
    
    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    message_text = update.message.caption if update.message.caption else update.message.text

    if message_text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not message_text:
        await update.message.reply_text("❌ Пожалуйста, добавь текст уведомления.")
        return AWAITING_INFO

    add_notification(message_text, group_name, user_id, photo_id)
    await update.message.reply_text("✅ Уведомление добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
    await send_notification_to_all(context.bot, message_text, group_name, user_id, photo_id)
    print(f"ЛОГ: Уведомление отправлено пользователем {user_id} для группы {group_name}.")
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def handle_sport_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    # Проверяем права через SPECIAL_USERS, а не через роль в базе
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_PHYSICAL_ORGANIZER]:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']

    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    message_text = update.message.caption if update.message.caption else update.message.text

    if message_text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not message_text:
        await update.message.reply_text("❌ Пожалуйста, добавь текст спортивного уведомления.")
        return AWAITING_SPORT
    
    add_sport_notification(message_text, group_name, user_id, photo_id)
    await update.message.reply_text("✅ Спортивное уведомление добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
    await send_sport_notification_to_all(context.bot, message_text, group_name, user_id, photo_id)
    print(f"ЛОГ: Спортивное уведомление отправлено пользователем {user_id} для группы {group_name}.")
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def handle_suggestion_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    text = update.message.text

    if text == '❌ Отмена':
        return await cancel_conversation(update, context)
    
    if not text:
        await update.message.reply_text("❌ Пожалуйста, напиши свое предложение.")
        return AWAITING_SUGGESTION

    add_suggestion(user_id, text)
    
    for special_id in SPECIAL_USERS:
        try:
            await context.bot.send_message(
                special_id,
                f"💡 Новое предложение от {user_data['first_name']} (@{user_data['username']}):\n\n{text}"
            )
        except Exception as e:
            print(f"Не удалось отправить предложение пользователю {special_id}: {e}")
    
    await update.message.reply_text("✅ Спасибо за предложение! Мы его рассмотрим.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Пользователь {user_id} отправил предложение.")
    return ConversationHandler.END

# --- NOTIFICATION SENDING LOGIC ---

async def send_homework_to_all(bot, subject, task, deadline, group_name, added_by, photo_id=None):
    """Sends homework to all users in a group"""
    homework_text = (
        f"📝 <b>НОВОЕ ДОМАШНЕЕ ЗАДАНИЕ</b>\n\n"
        f"📚 <b>Предмет:</b> {subject}\n"
        f"📋 <b>Задание:</b> {task}\n"
        f"⏰ <b>Срок сдачи:</b> {deadline}\n"
        f"👥 <b>Группа:</b> {group_name}\n"
    )
    
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
    
    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=homework_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], homework_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить ДЗ пользователю {user['user_id']}: {e}")

async def send_notification_to_all(bot, message, group_name, added_by, photo_id=None):
    """Sends a notification to all users in a group"""
    notification_text = (f"📢 <b>ВАЖНОЕ УВЕДОМЛЕНИЕ</b>\n\n{message}\n\n👥 <b>Группа:</b> {group_name}")
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
    
    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=notification_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], notification_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить уведомление пользователю {user['user_id']}: {e}")

async def send_sport_notification_to_all(bot, message, group_name, added_by, photo_id=None):
    """Sends a sport notification to all users in a group"""
    sport_text = (f"🏃 <b>СПОРТИВНОЕ УВЕДОМЛЕНИЕ</b>\n\n{message}\n\n👥 <b>Группа:</b> {group_name}")
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()

    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=sport_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], sport_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить спортивное уведомление пользователю {user['user_id']}: {e}")

# -------------------- INFO DISPLAY FUNCTIONS --------------------

async def show_homework(update: Update, group_name: str):
    """Shows all homework for a group"""
    homeworks = get_homeworks(group_name)
    if not homeworks:
        await update.message.reply_text("📭 Пока нет домашних заданий")
        return
    
    for hw in homeworks[:3]: # Show recent 3
        hw_text = (
            f"📝 <b>Домашнее задание</b>\n"
            f"📚 <b>Предмет:</b> {hw['subject']}\n"
            f"📋 <b>Задание:</b> {hw['task']}\n"
            f"⏰ <b>Срок:</b> {hw['deadline']}\n"
            f"👤 <b>Добавил:</b> {hw['first_name']}\n"
            f"📅 <b>Дата:</b> {datetime.fromisoformat(hw['created_at']).strftime('%d.%m.%Y %H:%M')}"
        )
        if hw['photo_id']:
            await update.message.reply_photo(photo=hw['photo_id'], caption=hw_text, parse_mode='HTML')
        else:
            await update.message.reply_text(hw_text, parse_mode='HTML')
    
    if len(homeworks) > 3:
        await update.message.reply_text(f"📊 <b>Показано 3 из {len(homeworks)} заданий</b>", parse_mode='HTML')

async def show_information(update: Update, group_name: str, role: str):
    """Shows information for the user"""
    user_count = get_total_user_count()
    info_text = f"📊 <b>Пользователей в боте:</b> {user_count}\n\n<b>Контакты:</b>\n"
    for data in SPECIAL_USERS.values():
        info_text += f"- <b>{data['name']}</b>: {data['username']}\n"
    await update.message.reply_text(info_text, parse_mode='HTML')

    notifications = get_notifications(group_name)
    sport_notifications = get_sport_notifications(group_name)
    if not notifications and not sport_notifications:
        await update.message.reply_text("📭 Пока нет уведомлений")
        return
    
    if notifications:
        await update.message.reply_text("📢 <b>Важные уведомления:</b>", parse_mode='HTML')
        for notif in notifications[:2]:
            notif_text = f"{notif['message']}\n\n👤 <b>От:</b> {notif['first_name']} | 📅 {datetime.fromisoformat(notif['created_at']).strftime('%d.%m.%Y')}"
            if notif['photo_id']:
                await update.message.reply_photo(photo=notif['photo_id'], caption=notif_text)
            else:
                await update.message.reply_text(notif_text)
    
    if sport_notifications:
        await update.message.reply_text("🏃 <b>Спортивные уведомления:</b>", parse_mode='HTML')
        for sport in sport_notifications[:2]:
            sport_text = f"{sport['message']}\n\n👤 <b>От:</b> {sport['first_name']} | 📅 {datetime.fromisoformat(sport['created_at']).strftime('%d.%m.%Y')}"
            if sport['photo_id']:
                await update.message.reply_photo(photo=sport['photo_id'], caption=sport_text)
            else:
                await update.message.reply_text(sport_text)

async def show_suggestions(update: Update):
    """Shows suggestions from students"""
    suggestions = get_suggestions()
    if not suggestions:
        await update.message.reply_text("📭 Пока нет предложений от учеников")
        return
    
    suggestions_text = "💡 <b>Предложения от учеников</b>\n\n"
    for i, s in enumerate(suggestions[:5], 1):
        username = f"@{s['username']}" if s['username'] else s['first_name']
        suggestions_text += f"{i}. {s['message']}\n👤 {username} | 📅 {datetime.fromisoformat(s['created_at']).strftime('%d.%m.%Y')}\n\n"
    await update.message.reply_text(suggestions_text, parse_mode='HTML')

async def contact_physical_organizer(update: Update):
    """Contact the physical organizer"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['role'] == ROLE_PHYSICAL_ORGANIZER), None)
    if username:
        await update.message.reply_text(f"🏃 <b>Связь с Физ. оргом</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Физ. орг. не найден")

async def contact_starosta(update: Update):
    """Contact the староста"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['name'] == 'Староста'), None)
    if username:
        await update.message.reply_text(f"👑 <b>Связь со старостой</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Староста не найден")

async def contact_deputy_starosta(update: Update):
    """Contact the зам старосты"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['name'] == 'Зам Старосты'), None)
    if username:
        await update.message.reply_text(f"👑 <b>Связь с замом старосты (разработчиком)</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Зам старосты не найден")

# -------------------- DELETION FUNCTIONS --------------------

async def delete_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_IT_SPECIALIST):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    homeworks = get_homeworks(user_data['group_name'])
    if not homeworks:
        await update.message.reply_text("📝 Нет домашних заданий для удаления.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(f"❌ {hw['subject']} | {hw['deadline']}", callback_data=f"del_hw_{hw['id']}")] for hw in homeworks[:5]]
    await update.message.reply_text("Выберите ДЗ для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_HOMEWORK_DELETE

async def delete_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_IT_SPECIALIST):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    user_data = get_user(user_id)
    notifications = get_notifications(user_data['group_name'])
    sport_notifications = get_sport_notifications(user_data['group_name'])
    
    if not notifications and not sport_notifications:
        await update.message.reply_text("📢 Нет уведомлений для удаления.")
        return ConversationHandler.END

    keyboard = []
    # Add regular notifications
    for n in notifications[:5]:
        button_text = f"📢 {n['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_notif_{n['id']}")])
    
    # Add sport notifications
    for s in sport_notifications[:5]:
        button_text = f"🏃 {s['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_sport_{s['id']}")])

    await update.message.reply_text("Выберите уведомление для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_INFO_DELETE

async def delete_sport_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_PHYSICAL_ORGANIZER):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    if user_id == DEVELOPER_ID:
        sport_notifications = get_all_sport_notifications()
    else:
        sport_notifications = get_sport_notifications(user_data['group_name'])

    if not sport_notifications:
        await update.message.reply_text("🏃 Нет спортивных уведомлений для удаления.")
        return ConversationHandler.END

    keyboard = []
    for sport in sport_notifications[:10]:
        button_text = f"🏃 {sport['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_sport_{sport['id']}")])

    await update.message.reply_text("Выберите спортивное уведомление для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_SPORT_DELETE

async def delete_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != DEVELOPER_ID:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    users = [u for u in get_all_users() if u['user_id'] not in SPECIAL_USERS]
    if not users:
        await update.message.reply_text("👥 Нет пользователей для удаления.")
        return ConversationHandler.END
        
    keyboard = [[InlineKeyboardButton(f"❌ {u['first_name']} (@{u['username']}) - Группа: {u['group_name']} - ID: {u['user_id']}", callback_data=f"del_user_{u['user_id']}")] for u in users]
    await update.message.reply_text("Выберите пользователя для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_USER_DELETE

async def delete_suggestions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] not in [ROLE_IT_SPECIALIST, ROLE_PHYSICAL_ORGANIZER]):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    suggestions = get_suggestions()
    if not suggestions:
        await update.message.reply_text("💡 Нет предложений для удаления.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(f"❌ {s['message'][:20]}...", callback_data=f"del_sugg_{s['id']}")] for s in suggestions[:5]]
    await update.message.reply_text("Выберите предложение для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_SUGGESTION_DELETE

async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    action = parts[0]
    data_type = parts[1]
    item_id = int(parts[2])
    
    message = "❌ Произошла ошибка."
    try:
        if data_type == 'hw':
            delete_homework(item_id)
            message = "✅ Домашнее задание успешно удалено."
        elif data_type == 'notif':
            delete_notification(item_id)
            message = "✅ Уведомление успешно удалено."
        elif data_type == 'sport':
            delete_sport_notification(item_id)
            message = "✅ Спортивное уведомление успешно удалено."
        elif data_type == 'user':
            delete_user(item_id)
            message = "✅ Пользователь успешно удален."
        elif data_type == 'sugg':
            delete_suggestion(item_id)
            message = "✅ Предложение успешно удалено."
        
        await query.edit_message_text(text=message)
    except Exception as e:
        await query.edit_message_text(text=f"❌ Ошибка при удалении: {e}")
    
    await show_main_menu(update, query.from_user.id)
    return ConversationHandler.END

# -------------------- ROLE FIX FUNCTION --------------------

async def handle_role_fix_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the role fix callback"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    user_id = int(parts[2])
    
    # Проверяем, что запрос от того же пользователя
    if query.from_user.id != user_id:
        await query.edit_message_text("❌ Вы не можете исправить роль другого пользователя.")
        return
    
    # Обновляем пользователя
    user = query.from_user
    add_user(user_id, user.username, user.first_name, user.last_name)
    
    await query.edit_message_text("✅ Ваша роль была обновлена! Теперь у вас должны быть все права.")
    await show_main_menu(update, user_id)

# -------------------- JOB QUEUE FUNCTIONS --------------------

# ИСПРАВЛЕНО: Функция теперь принимает аргумент 'application', как того требует post_init
async def init_schedule_cache(application):
    """Initializes the schedule cache"""
    global schedule_cache, last_schedule_check
    schedule_data = fetch_schedule_data()
    if schedule_data:
        schedule_cache = schedule_data
        last_schedule_check = datetime.now(YEKATERINBURG_TZ)
        print("ЛОГ: Кэш расписания инициализирован")

# -------------------- MAIN FUNCTION --------------------

def main():
    """Main function to run the bot"""
    init_db()
    
    # ИСПРАВЛЕНО: Асинхронная инициализация кэша передается в post_init
    app = Application.builder().token(BOT_TOKEN).post_init(init_schedule_cache).build()
    
    # Add job queue handlers
    job_queue = app.job_queue
    job_queue.run_repeating(check_schedule_changes, interval=3600, first=10)  # Check every hour
    job_queue.run_daily(send_daily_schedule, time=datetime.strptime("19:00", "%H:%M").time(), days=(0, 1, 2, 3, 4, 5, 6))
    job_queue.run_daily(send_morning_schedule, time=datetime.strptime("07:00", "%H:%M").time(), days=(0, 1, 2, 3, 4, 5, 6))
    job_queue.run_repeating(check_next_lesson, interval=60, first=10)  # Check every minute
    
    # ConversationHandler for managing dialogs
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command),
            MessageHandler(filters.Regex('^📢 Отправить ДЗ$') & filters.User(SPECIAL_USERS.keys()), ask_homework_details),
            MessageHandler(filters.Regex('^📢 Отправить уведомление$') & filters.User(SPECIAL_USERS.keys()), ask_notification_details),
            MessageHandler(filters.Regex('^🏃 Отправить спортивное уведомление$') & filters.User(SPECIAL_USERS.keys()), ask_sport_notification_details),
            MessageHandler(filters.Regex('^💡 Предложить идею$'), ask_suggestion_details),
            MessageHandler(filters.Regex('^Удалить ДЗ$') & (filters.User(SPECIAL_USERS.keys()) | filters.User(user_id=DEVELOPER_ID)), delete_homework_menu),
            MessageHandler(filters.Regex('^Удалить уведомление$') & (filters.User(SPECIAL_USERS.keys()) | filters.User(user_id=DEVELOPER_ID)), delete_notification_menu),
            MessageHandler(filters.Regex('^Удалить спортивные уведомления$') & (filters.User(SPECIAL_USERS.keys()) | filters.User(user_id=DEVELOPER_ID)), delete_sport_notification_menu),
            MessageHandler(filters.Regex('^Удалить предложения$') & (filters.User(SPECIAL_USERS.keys()) | filters.User(user_id=DEVELOPER_ID)), delete_suggestions_menu),
            MessageHandler(filters.Regex('^Удалить пользователя$') & filters.User(user_id=DEVELOPER_ID), delete_user_menu),
            MessageHandler(filters.Regex('^🎓 Сменить группу$'), ask_user_group),
        ],
        states={
            AWAITING_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_selection)],
            AWAITING_HOMEWORK: [MessageHandler(filters.TEXT | filters.PHOTO, handle_homework_input)],
            AWAITING_INFO: [MessageHandler(filters.TEXT | filters.PHOTO, handle_notification_input)],
            AWAITING_SPORT: [MessageHandler(filters.TEXT | filters.PHOTO, handle_sport_input)],
            AWAITING_SUGGESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_suggestion_input)],
            AWAITING_HOMEWORK_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_hw_')],
            AWAITING_INFO_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_notif_')],
            AWAITING_SPORT_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_sport_')],
            AWAITING_USER_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_user_')],
            AWAITING_SUGGESTION_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_sugg_')]
        },
        fallbacks=[
            CommandHandler('start', start_command),
            MessageHandler(filters.Regex('^❌ Отмена$'), cancel_conversation)
        ],
        allow_reentry=True
    )
    
    # Add the conversation handler first
    app.add_handler(conv_handler)
    
    # Add callback handler for role fix
    app.add_handler(CallbackQueryHandler(handle_role_fix_callback, pattern='^fix_role_'))
    
    # Then add the general message handler for non-conversation buttons
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_simple_message))
    
    print("ЛОГ: Бот запущен!")
    app.run_polling()

if __name__ == "__main__":
    main()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /start"""
    user = update.effective_user
    user_id = user.id
    
    # Сохраняем пользователя в базу
    users_db[user_id] = {
        'first_name': user.first_name,
        'username': user.username,
        'last_name': user.last_name,
        'last_start': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    print(f"Новый пользователь: {user.first_name} (ID: {user_id})")
    await show_main_menu(update, user_id)

async def show_main_menu(update, user_id):
    """Показывает главное меню в зависимости от прав пользователя"""
    if user_id == HEADMAN_ID:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения'],
            ['📢 Отправить ДЗ всем', '📢 Отправить информацию']
        ]
        text = "Добро пожаловать, Староста! 👑"
    elif user_id == DEPUTY_HEADMAN_ID:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения'],
            ['📢 Отправить ДЗ всем', '📢 Отправить информацию']
        ]
        text = "Добро пожаловать, Зам Старосты! ⭐"
    else:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['📞 Связаться со Старостой', '📞 Связаться с Замом'],
            ['💡 Предложить идею']
        ]
        text = "Добро пожаловать! Выбери нужный раздел 👇"
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if isinstance(update, Update):
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.edit_message_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик текстовых сообщений"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # Проверяем сначала специальные состояния
    if (context.user_data.get('awaiting_homework') or 
        context.user_data.get('awaiting_information') or 
        context.user_data.get('awaiting_suggestion') or
        context.user_data.get('awaiting_homework_delete')):
        await handle_special_states(update, context)
        return
    
    # Затем проверяем обычные команды
    if text == '📅 Расписание':
        await show_schedule_periods(update, user_id)
    
    elif text == '📝 ДЗ':
        await show_homework(update, user_id)
    
    elif text == 'ℹ️ Информация' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await show_information_admin(update, user_id)
    
    elif text == 'ℹ️ Информация':
        await show_information_user(update, user_id)
    
    elif text == '💡 Предложения' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await show_suggestions(update, user_id)
    
    elif text == '📢 Отправить ДЗ всем' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_homework_details(update, context)
    
    elif text == '📢 Отправить информацию' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_information_details(update, context)
    
    elif text == '❌ Удалить ДЗ' and user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await ask_homework_delete(update, context)
    
    elif text == '📞 Связаться со Старостой' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await contact_headman(update)
    
    elif text == '📞 Связаться с Замом' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await contact_deputy(update)
    
    elif text == '💡 Предложить идею' and user_id not in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        await suggest_idea(update, context)
    
    # Обработка периодов расписания
    elif text in ['📅 Сегодня', '📅 Завтра', '📅 Неделя', '📅 Все расписание']:
        await handle_schedule_period(update, context)
    
    elif text == '🔙 Назад':
        await show_main_menu(update, user_id)
    
    else:
        await update.message.reply_text("Используй кнопки для навигации 👇")

async def ask_homework_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Запрашивает детали ДЗ для отправки"""
    context.user_data['awaiting_homework'] = True
    await update.message.reply_text(
        "📝 <b>Добавление нового ДЗ</b>\n\n"
        "Напиши в формате:\n"
        "<b>Предмет</b>\n"
        "<b>Задание</b>\n"
        "<b>Срок сдачи</b>\n\n"
        "Пример:\n"
        "Математика\n"
        "Решить задачи 1-10 на странице 45\n"
        "До 15.09",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )

async def ask_information_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Запрашивает информацию для отправки всем"""
    context.user_data['awaiting_information'] = True
    await update.message.reply_text(
        "ℹ️ <b>Отправка информации всем</b>\n\n"
        "Напиши информацию, которую нужно отправить всем ученикам:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )

async def ask_homework_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Запрашивает номер ДЗ для удаления"""
    if not homeworks_db:
        await update.message.reply_text("📭 Нет домашних заданий для удаления")
        return
    
    context.user_data['awaiting_homework_delete'] = True
    
    # Показываем список ДЗ с номерами
    hw_list = "❌ <b>Удаление ДЗ</b>\n\n"
    for i, hw in enumerate(homeworks_db, 1):
        hw_list += f"{i}. {hw['subject']} - {hw['task'][:30]}...\n"
    
    hw_list += "\nНапиши номер ДЗ для удаления (только цифру):"
    
    await update.message.reply_text(
        hw_list,
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )

async def handle_special_states(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обрабатывает специальные состояния"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if context.user_data.get('awaiting_homework'):
        if text == '❌ Отмена':
            context.user_data['awaiting_homework'] = False
            await show_main_menu(update, user_id)
            return
        
        lines = text.split('\n')
        if len(lines) >= 3:
            subject = lines[0].strip()
            task = lines[1].strip()
            deadline = lines[2].strip()
            
            homework = {
                'subject': subject,
                'task': task,
                'deadline': deadline,
                'date_added': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'added_by': user_id
            }
            homeworks_db.append(homework)
            
            await send_homework_to_all(context.bot, homework)
            
            context.user_data['awaiting_homework'] = False
            keyboard = [
                ['📝 ДЗ', '📢 Отправить ДЗ всем'],
                ['🔙 Назад']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "✅ ДЗ успешно отправлено всем ученикам!",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("❌ Неправильный формат. Нужно 3 строки: предмет, задание, срок")
    
    elif context.user_data.get('awaiting_information'):
        if text == '❌ Отмена':
            context.user_data['awaiting_information'] = False
            await show_main_menu(update, user_id)
            return
        
        info = {
            'text': text,
            'date_added': datetime.now().strftime('%d.%m.%Y %H:%M'),
            'added_by': user_id
        }
        info_db.append(info)
        
        await send_information_to_all(context.bot, info)
        
        context.user_data['awaiting_information'] = False
        keyboard = [
            ['ℹ️ Информация', '📢 Отправить информацию'],
            ['🔙 Назад']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "✅ Информация успешно отправлена всем ученикам!",
            reply_markup=reply_markup
        )
    
    elif context.user_data.get('awaiting_suggestion'):
        if text == '❌ Отмена':
            context.user_data['awaiting_suggestion'] = False
            await show_main_menu(update, user_id)
            return
        
        suggestion = {
            'user_id': user_id,
            'text': text,
            'date': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        suggestions_db.append(suggestion)
        
        user = update.effective_user
        sender_info = f"{user.first_name} (@{user.username})" if user.username else user.first_name
        
        try:
            await context.bot.send_message(
                HEADMAN_ID,
                f"💡 Новое предложение от {sender_info}:\n\n{text}\n\n📅 {suggestion['date']}"
            )
            await context.bot.send_message(
                DEPUTY_HEADMAN_ID, 
                f"💡 Новое предложение от {sender_info}:\n\n{text}\n\n📅 {suggestion['date']}"
            )
        except Exception as e:
            print(f"Ошибка отправки уведомления: {e}")
        
        context.user_data['awaiting_suggestion'] = False
        await update.message.reply_text(
            "✅ Спасибо за предложение! Мы его рассмотрим.",
            reply_markup=ReplyKeyboardMarkup([['📅 Расписание'], ['💡 Предложить идею']], resize_keyboard=True)
        )
    
    elif context.user_data.get('awaiting_homework_delete'):
        if text == '❌ Отмена':
            context.user_data['awaiting_homework_delete'] = False
            await show_main_menu(update, user_id)
            return
        
        try:
            hw_number = int(text)
            if 1 <= hw_number <= len(homeworks_db):
                deleted_hw = homeworks_db.pop(hw_number - 1)
                context.user_data['awaiting_homework_delete'] = False
                
                keyboard = [
                    ['📝 ДЗ', '❌ Удалить ДЗ'],
                    ['🔙 Назад']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"✅ ДЗ №{hw_number} удалено!\n"
                    f"📚 {deleted_hw['subject']}\n"
                    f"📋 {deleted_hw['task'][:50]}...",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("❌ Неверный номер ДЗ. Попробуй еще раз:")
        except ValueError:
            await update.message.reply_text("❌ Введи только цифру (номер ДЗ):")

async def send_homework_to_all(bot, homework):
    """Отправляет ДЗ всем пользователям"""
    homework_text = (
        f"📝 <b>НОВОЕ ДОМАШНЕЕ ЗАДАНИЕ</b>\n\n"
        f"📚 <b>Предмет:</b> {homework['subject']}\n"
        f"📋 <b>Задание:</b> {homework['task']}\n"
        f"⏰ <b>Срок сдачи:</b> {homework['deadline']}\n"
        f"📅 <b>Добавлено:</b> {homework['date_added']}\n\n"
        f"💡 Используй кнопку '📝 ДЗ' для просмотра всех заданий"
    )
    
    sent_count = 0
    for user_id in users_db:
        try:
            await bot.send_message(user_id, homework_text, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            print(f"Не удалось отправить ДЗ пользователю {user_id}: {e}")
    
    print(f"ДЗ отправлено {sent_count} пользователям")

async def send_information_to_all(bot, information):
    """Отправляет информацию всем пользователям"""
    info_text = (
        f"📢 <b>ВАЖНАЯ ИНФОРМАЦИЯ</b>\n\n"
        f"{information['text']}\n\n"
        f"📅 <b>Отправлено:</b> {information['date_added']}"
    )
    
    sent_count = 0
    for user_id in users_db:
        try:
            await bot.send_message(user_id, info_text, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            print(f"Не удалось отправить информацию пользователю {user_id}: {e}")
    
    print(f"Информация отправлена {sent_count} пользователям")

async def show_homework(update: Update, user_id: int):
    """Показывает все ДЗ с возможностью удаления для админов"""
    if not homeworks_db:
        await update.message.reply_text("📭 Пока нет домашних заданий")
        return
    
    hw_text = "📝 <b>ВСЕ ДОМАШНИЕ ЗАДАНИЯ</b>\n\n"
    
    for i, hw in enumerate(homeworks_db, 1):
        hw_text += (
            f"🔹 <b>Задание {i}</b>\n"
            f"📚 <b>Предмет:</b> {hw['subject']}\n"
            f"📋 <b>Задание:</b> {hw['task']}\n"
            f"⏰ <b>Срок:</b> {hw['deadline']}\n"
            f"📅 <b>Добавлено:</b> {hw['date_added']}\n\n"
        )
    
    hw_text += f"📊 <b>Всего заданий:</b> {len(homeworks_db)}"
    
    # Разные клавиатуры для админов и обычных пользователей
    if user_id in [HEADMAN_ID, DEPUTY_HEADMAN_ID]:
        keyboard = [
            ['❌ Удалить ДЗ', '📢 Отправить ДЗ всем'],
            ['🔙 Назад']
        ]
    else:
        keyboard = [['🔙 Назад']]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(hw_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_information_admin(update: Update, user_id: int):
    """Показывает информацию для администрации"""
    info_text = (
        "ℹ️ <b>Информация для руководства</b>\n\n"
        f"👑 <b>Староста</b>: {HEADMAN_USERNAME}\n"
        f"⭐ <b>Зам старосты</b>: {DEPUTY_HEADMAN_USERNAME}\n\n"
        f"👥 <b>Пользователей в боте:</b> {len(users_db)}"
    )
    
    keyboard = [
        ['📢 Отправить информацию', '🔙 Назад']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_information_user(update: Update, user_id: int):
    """Показывает информацию для обычных пользователей"""
    if not info_db:
        await update.message.reply_text("📭 Пока нет важной информации")
        return
    
    recent_info = info_db[-3:] if len(info_db) > 3 else info_db
    
    info_text = "ℹ️ <b>ВАЖНАЯ ИНФОРМАЦИЯ</b>\n\n"
    
    for i, info in enumerate(recent_info, 1):
        info_text += (
            f"🔹 <b>Сообщение {i}</b>\n"
            f"{info['text']}\n"
            f"📅 {info['date_added']}\n\n"
        )
    
    keyboard = [['🔙 Назад']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def show_suggestions(update: Update, user_id: int):
    """Показывает предложения от учеников"""
    if not suggestions_db:
        await update.message.reply_text("📭 Пока нет предложений от учеников")
        return
    
    suggestions_text = "💡 <b>Предложения от учеников</b>\n\n"
    for i, suggestion in enumerate(suggestions_db, 1):
        user_info = users_db.get(suggestion['user_id'], {})
        username = user_info.get('first_name', 'Неизвестный')
        suggestions_text += f"{i}. {suggestion['text']}\n👤 {username} | 📅 {suggestion['date']}\n\n"
    
    keyboard = [['🔙 Назад']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(suggestions_text, parse_mode='HTML', reply_markup=reply_markup)

async def contact_headman(update: Update):
    """Связь со старостой"""
    contact_text = (
        "👑 <b>Связь со Старостой</b>\n\n"
        f"📞 Telegram: {HEADMAN_USERNAME}\n"
    )
    await update.message.reply_text(contact_text, parse_mode='HTML')

async def contact_deputy(update: Update):
    """Связь с зам старосты"""
    contact_text = (
        "⭐ <b>Связь с Замом Старосты</b>\n\n"
        f"📞 Telegram: {DEPUTY_HEADMAN_USERNAME}\n"
    )
    await update.message.reply_text(contact_text, parse_mode='HTML')

async def suggest_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Предложить идею по развитию бота"""
    context.user_data['awaiting_suggestion'] = True
    await update.message.reply_text(
        "💡 Напиши свое предложение по улучшению бота:\n\n"
        "Что бы ты хотел добавить или изменить?",
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )

async def show_schedule_periods(update: Update, user_id: int):
    """Показывает выбор периода расписания"""
    keyboard = [
        ['📅 Сегодня', '📅 Завтра'],
        ['📅 Неделя', '📅 Все расписание'],
        ['🔙 Назад']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("Выбери период для просмотра расписания:", reply_markup=reply_markup)

async def handle_schedule_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обрабатывает выбор периода расписания"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text in ['📅 Сегодня', '📅 Завтра', '📅 Неделя', '📅 Все расписание']:
        schedule = get_schedule(text)
        await update.message.reply_text(schedule, parse_mode='HTML')
    elif text == '🔙 Назад':
        await show_main_menu(update, user_id)
    else:
        await update.message.reply_text("Выбери период из предложенных 👇")

def get_schedule(period):
    """Получает и форматирует расписание для выбранного периода"""
    try:
        schedule_data = fetch_schedule_data()
        if not schedule_data:
            return "❌ Не удалось загрузить расписание"

        group = "ИД-127"
        if group not in schedule_data:
            return f"❌ Нет расписания для группы {group}"

        lessons = schedule_data[group]
        
        # Отладочная информация
        now_yekat = datetime.now(YEKATERINBURG_TZ)
        print(f"Текущее время Екатеринбург: {now_yekat}")
        print(f"Текущая дата Екатеринбург: {now_yekat.date()}")
        print(f"Всего занятий в расписании: {len(lessons)}")
        
        if period == '📅 Сегодня':
            filtered_lessons = filter_today_lessons(lessons)
            title = "📅 Расписание на сегодня"
            print(f"Сегодняшних занятий: {len(filtered_lessons)}")
        elif period == '📅 Завтра':
            filtered_lessons = filter_tomorrow_lessons(lessons)
            title = "📅 Расписание на завтра"
            print(f"Завтрашних занятий: {len(filtered_lessons)}")
        elif period == '📅 Неделя':
            filtered_lessons = filter_week_lessons(lessons)
            title = "📅 Расписание на неделю"
        else:
            filtered_lessons = lessons
            title = "📅 Все расписание"

        if not filtered_lessons:
            return f"❌ Нет занятий для выбранного периода: {period}"

        return format_schedule(filtered_lessons, title)

    except Exception as e:
        return f"❌ Произошла ошибка: {str(e)}"

def fetch_schedule_data():
    """Получает данные расписания с сайта"""
    try:
        url = "https://pmk-online.ru/students/schedule/"
        
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        html = resp.text

        match = re.search(r"const scheduleData\s*=\s*(\{.*?\});", html, re.S)
        if not match:
            return None

        schedule_raw = match.group(1)
        schedule_json_str = schedule_raw.replace(";", "")
        return json.loads(schedule_json_str)
    
    except Exception as e:
        print(f"Ошибка загрузки расписания: {e}")
        return None

def filter_today_lessons(lessons):
    """Фильтрует занятия на сегодня с учетом времени Екатеринбурга"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    print(f"Ищем занятия на сегодня (Екатеринбург): {today_yekat}")
    
    result = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            # Парсим дату из UTC и конвертируем в Екатеринбург
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ).date()
            
            if lesson_date_yekat == today_yekat:
                result.append(lesson)
                print(f"Найдено занятие на сегодня: {lesson_date_str} -> {lesson_date_yekat} - {lesson.get('subjectFull')}")
        except Exception as e:
            print(f"Ошибка обработки занятия: {e}")
            continue
    
    return result

def filter_tomorrow_lessons(lessons):
    """Фильтрует занятия на завтра с учетом времени Екатеринбурга"""
    tomorrow_yekat = (datetime.now(YEKATERINBURG_TZ) + timedelta(days=1)).date()
    print(f"Ищем занятия на завтра (Екатеринбург): {tomorrow_yekat}")
    
    result = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            # Парсим дату из UTC и конвертируем в Екатеринбург
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ).date()
            
            if lesson_date_yekat == tomorrow_yekat:
                result.append(lesson)
                print(f"Найдено занятие на завтра: {lesson_date_str} -> {lesson_date_yekat} - {lesson.get('subjectFull')}")
        except Exception as e:
            print(f"Ошибка обработки занятия: {e}")
            continue
    
    return result

def filter_week_lessons(lessons):
    """Фильтрует занятия на неделю с учетом времени Екатеринбурга"""
    today_yekat = datetime.now(YEKATERINBURG_TZ)
    week_end = today_yekat + timedelta(days=7)
    
    week_lessons = []
    for lesson in lessons:
        try:
            lesson_date_str = lesson.get('date', '')
            if not lesson_date_str:
                continue
                
            lesson_date_utc = datetime.fromisoformat(lesson_date_str.replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            
            if today_yekat.date() <= lesson_date_yekat.date() <= week_end.date():
                week_lessons.append(lesson)
        except Exception as e:
            print(f"Ошибка фильтрации занятия: {e}")
            continue
    
    return week_lessons

def get_lesson_time(lesson_number):
    """Возвращает время пары по номеру согласно вашему расписанию"""
    lesson_times = {
        1: ("08:30", "10:05"),
        2: ("10:15", "11:50"), 
        3: ("12:40", "14:15"),
        4: ("14:25", "16:00"),
        5: ("16:10", "17:45"),
        6: ("17:55", "19:30"),
    }
    return lesson_times.get(lesson_number, ("❓", "❓"))

def format_schedule(lessons, title):
    if not lessons:
        return "❌ Нет занятий"
    
    # Сортируем по дате и номеру пары
    lessons.sort(key=lambda x: (x['date'], x.get('lessonNumber', 0)))
    
    result = [f"<b>{title}</b>\n", "<b>Группа: ИД-127</b>\n"]
    
    current_date = None
    for lesson in lessons:
        try:
            # Конвертируем UTC время в екатеринбургское
            lesson_date_utc = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            
            date_str = lesson_date_yekat.strftime('%d.%m.%Y')
            
            if date_str != current_date:
                current_date = date_str
                # Добавляем день недели
                day_names = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
                day_of_week = day_names[lesson_date_yekat.weekday()]
                result.append(f"\n📅 <b>{date_str} ({day_of_week})</b>")
            
            # Получаем время пары по номеру
            lesson_number = lesson.get('lessonNumber', 0)
            start_time, end_time = get_lesson_time(lesson_number)
            
            lesson_text = (
                f"    ⏰ {start_time}-{end_time} | {lesson_number} пара\n"
                f"    📚 {lesson['subjectFull']}\n"
                f"    👨‍🏫 {lesson.get('teacher', 'Преподаватель не указан')}\n"
                f"    🚪 {lesson['room']}\n"
            )
            result.append(lesson_text)
            
        except Exception as e:
            print(f"Ошибка форматирования занятия: {e}")
            continue
    
    result.append(f"\n📊 <b>Всего занятий:</b> {len(lessons)}")
    return "\n".join(result)

async def send_daily_schedule(bot):
    """Отправляет расписание на завтра всем пользователям в 19:00 по Екатеринбургу"""
    global background_task_running
    
    while background_task_running:
        try:
            now = datetime.now(YEKATERINBURG_TZ)
            
            # Проверяем, сейчас 19:00 по Екатеринбургу?
            if now.hour == 19 and now.minute == 0:
                print(f"⏰ Время отправки расписания! {now}")
                
                # Получаем расписание на завтра
                schedule_data = fetch_schedule_data()
                if schedule_data and "ИД-127" in schedule_data:
                    lessons = schedule_data["ИД-127"]
                    tomorrow_lessons = filter_tomorrow_lessons(lessons)
                    
                    if tomorrow_lessons:
                        schedule_text = format_schedule(tomorrow_lessons, "📅 Расписание на завтра")
                        
                        # Отправляем всем пользователям
                        sent_count = 0
                        for user_id in users_db:
                            try:
                                await bot.send_message(user_id, schedule_text, parse_mode='HTML')
                                sent_count += 1
                            except Exception as e:
                                print(f"Не удалось отправить расписание пользователю {user_id}: {e}")
                        
                        print(f"✅ Расписание на завтра отправлено {sent_count} пользователям в {now}")
                    else:
                        print("ℹ️ На завтра нет занятий")
                else:
                    print("❌ Не удалось загрузить расписание")
                
                # Ждем 1 минуту чтобы не отправить несколько раз в течение одной минуты
                await asyncio.sleep(60)
            else:
                # Проверяем каждую минуту
                await asyncio.sleep(60)
                
        except Exception as e:
            print(f"Ошибка при отправке ежедневного расписания: {e}")
            await asyncio.sleep(60)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Ошибка: {context.error}")

async def main():
    """Основная функция запуска бота"""
    print("Запуск бота с полной функциональностью...")
    
    # Создаем приложение
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Добавляем обработчики
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Обработчик ошибок
    app.add_error_handler(error_handler)
    
    # Запускаем бота
    print("Бот запущен!")
    print("Расписание будет отправляться ежедневно в 19:00 по Екатеринбургу")
    print("Для остановки нажмите Ctrl+C")
    
    # Запускаем фоновую задачу для отправки расписания
    background_task = asyncio.create_task(send_daily_schedule(app.bot))
    
    try:
        # Запускаем polling
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        # Ждем завершения
        await background_task
        
    except asyncio.CancelledError:
        print("Бот остановлен")
    except Exception as e:
        print(f"Ошибка: {e}")
    finally:
        global background_task_running
        background_task_running = False
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    # Запускаем основную функцию
    asyncio.run(main())
