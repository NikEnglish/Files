import time
import os
import asyncio
import sys
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import TelegramError

# --- Настройки ---
TELEGRAM_BOT_TOKEN = 'ВАШ_ТОКЕН_БОТА'
TELEGRAM_CHAT_ID = 'ВАШ_CHAT_ID'
LOG_FILE_PATH = os.path.join(os.getenv('APPDATA'), '.minecraft', 'logs', 'latest.log')
MUTED_PLAYERS_FILE = 'muted_players.txt'

muted_players = set()

def load_muted_players():
    """Загружает список заглушенных игроков из файла."""
    if os.path.exists(MUTED_PLAYERS_FILE):
        with open(MUTED_PLAYERS_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                muted_players.add(line.strip())
    print(f"Загружено заглушенных игроков: {muted_players}")

def save_muted_players():
    """Сохраняет список заглушенных игроков в файл."""
    with open(MUTED_PLAYERS_FILE, 'w', encoding='utf-8') as f:
        for player in muted_players:
            f.write(f"{player}\n")
    print(f"Список заглушенных игроков сохранен: {muted_players}")


async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /mute."""
    if str(update.effective_chat.id) != TELEGRAM_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("Используйте: /mute <ник_игрока>")
        return

    player_to_mute = context.args[0]
    muted_players.add(player_to_mute)
    save_muted_players()
    await update.message.reply_text(f"Игрок '{player_to_mute}' заглушен.")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /unmute."""
    if str(update.effective_chat.id) != TELEGRAM_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("Используйте: /unmute <ник_игрока>")
        return

    player_to_unmute = context.args[0]
    if player_to_unmute in muted_players:
        muted_players.remove(player_to_unmute)
        save_muted_players()
        await update.message.reply_text(f"Игрок '{player_to_unmute}' разглушен.")
    else:
        await update.message.reply_text(f"Игрок '{player_to_unmute}' не был заглушен.")

async def monitor_logs(application):
    """Следит за логами и отправляет сообщения в Telegram."""
    try:
        bot = application.bot
        with open(LOG_FILE_PATH, 'r', encoding='utf-8', errors='ignore') as file:
            file.seek(0, os.SEEK_END)

            print("Бот готов. Ожидаю сообщений в логах Minecraft...")

            while True:
                line = file.readline()
                if not line:
                    await asyncio.sleep(1)
                    continue

                if "[CHAT]" in line:
                    chat_message = line.split('[CHAT] ')[-1].strip()
                    player_name = chat_message.split(':', 1)[0].strip()

                    if player_name not in muted_players:
                        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=chat_message)
                        
    except FileNotFoundError:
        print(f"Ошибка: Файл не найден по пути: {LOG_FILE_PATH}")
    except Exception as e:
        print(f"Произошла ошибка при чтении файла: {e}")

async def post_init(application: ApplicationBuilder):
    """Запускает мониторинг логов после инициализации бота."""
    asyncio.create_task(monitor_logs(application))

async def main():
    """Основная функция для запуска бота."""
    if not all([TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        print("Ошибка: Укажите TELEGRAM_BOT_TOKEN и TELEGRAM_CHAT_ID в настройках.")
        sys.exit(1)

    load_muted_players()

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    
    print("Бот запущен...")
    await application.run_polling()

if __name__ == '__main__':
    try:
        # Пытаемся запустить асинхронную функцию
        asyncio.run(main())
    except RuntimeError:
        # Если цикл уже запущен, запускаем его через get_event_loop
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
