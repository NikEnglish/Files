import sqlite3
import re
import json
import asyncio
import requests
import os
from datetime import datetime, timedelta, timezone, time
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# -------------------- CONSTANTS AND SETTINGS --------------------
BOT_TOKEN = "7405848829:AAHxDv0DP_Co512vOvGw_PDsXYDjE4fgOJ0"
YEKATERINBURG_TZ = timezone(timedelta(hours=5))
DEFAULT_GROUP = "ИД-127"

# States for ConversationHandler
AWAITING_HOMEWORK, AWAITING_INFO, AWAITING_SPORT, AWAITING_SUGGESTION, AWAITING_HOMEWORK_DELETE, AWAITING_INFO_DELETE, AWAITING_SPORT_DELETE, AWAITING_GROUP, AWAITING_USER_DELETE, AWAITING_SUGGESTION_DELETE = range(10)

# User Roles
ROLE_STUDENT = 'student'
ROLE_PHYSICAL_ORGANIZER = 'physical_organizer'
ROLE_IT_SPECIALIST = 'it_specialist'

# Special Users (ID and username)
DEVELOPER_ID = 1775957387
SPECIAL_USERS = {
    5013216284: {'role': ROLE_IT_SPECIALIST, 'username': '@kimertuzz3', 'name': 'Староста'},
    DEVELOPER_ID: {'role': ROLE_IT_SPECIALIST, 'username': '@imya_polbzovatela', 'name': 'Зам Старосты'},
    5078637058: {'role': ROLE_PHYSICAL_ORGANIZER, 'username': '@NateDiazFight', 'name': 'Физ. орг.'}
}

# Full list of groups
ALL_GROUPS = [
    "ИД-126", "ИД-127", "МД-1126", "МД-1127", "МД-1128", "ОДЛД-107", "ОДЛД-108",
    "ПСД-144", "ПСД-145", "ТД-1128", "ТД-1129", "ТД-1130", "ТМД-123", "ТМД-124", "ТМД-125",
    "ЭД-1111", "ЭД-1112", "ЭД-1113", "ИД-224", "ИД-225", "МД-2123", "МД-2124", "МД-2125",
    "ОдЛД-205", "ОдЛД-206", "ПСД-242", "ПСД-243", "ТД-2125", "ТД-2126", "ТД-2127", "ТМД-220",
    "ТМД-221", "ТМД-222", "ЭД-2108", "ЭД-2109", "ЭД-2110", "ИД-323", "МД-3121", "МД-3122",
    "ОСАД-302", "ОдЛД-303", "ОдЛД-304", "ПСД-340", "ПСД-341", "ТД-3121", "ТД-3123", "ТМД-317",
    "ТМД-318", "ЭД-3106", "ЭД-3107", "ИД-421", "ИД-422"
]

# Schedule cache
schedule_cache = {}
last_schedule_check = None

# User notifications cache to prevent duplicate messages
user_notification_cache = {}

# -------------------- DATABASE FUNCTIONS --------------------

def init_db():
    """Initializes the database"""
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    
    # Users table
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        group_name TEXT,
        role TEXT DEFAULT 'student',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    # Homeworks table
    cur.execute('''CREATE TABLE IF NOT EXISTS homeworks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        subject TEXT,
        task TEXT,
        deadline TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Notifications table (from IT specialists)
    cur.execute('''CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Sport notifications table (from physical organizer)
    cur.execute('''CREATE TABLE IF NOT EXISTS sport_notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message TEXT,
        group_name TEXT,
        added_by INTEGER,
        photo_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (added_by) REFERENCES users (user_id)
    )''')
    
    # Suggestions table
    cur.execute('''CREATE TABLE IF NOT EXISTS suggestions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    conn.commit()
    conn.close()
    print("ЛОГ: База данных инициализирована.")

def get_db_connection():
    """Creates a connection to the database"""
    conn = sqlite3.connect('bot_data.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_user(user_id):
    """Gets user information"""
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    conn.close()
    return user

def get_all_users():
    """Gets a list of all users"""
    conn = get_db_connection()
    users = conn.execute('SELECT user_id, first_name, username, group_name FROM users').fetchall()
    conn.close()
    return users

def add_user(user_id, username, first_name, last_name):
    """Adds a new user to the database or updates existing user"""
    conn = get_db_connection()
    
    existing_user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    
    role = ROLE_STUDENT
    if user_id in SPECIAL_USERS:
        role = SPECIAL_USERS[user_id]['role']
    
    if not existing_user:
        conn.execute('''INSERT INTO users (user_id, username, first_name, last_name, group_name, role)
                     VALUES (?, ?, ?, ?, ?, ?)''',
                     (user_id, username, first_name, last_name, DEFAULT_GROUP, role))
        print(f"ЛОГ: Добавлен новый пользователь: {first_name} (ID: {user_id}) с группой {DEFAULT_GROUP} и ролью {role}")
    else:
        conn.execute('''UPDATE users 
                     SET username = ?, first_name = ?, last_name = ?, role = ?
                     WHERE user_id = ?''',
                     (username, first_name, last_name, role, user_id))
        print(f"ЛОГ: Обновлен пользователь: {first_name} (ID: {user_id}), роль: {role}")
    
    conn.commit()
    conn.close()

def update_user_group(user_id, group_name):
    """Updates the user's group"""
    conn = get_db_connection()
    conn.execute('UPDATE users SET group_name = ? WHERE user_id = ?', (group_name, user_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} сменил группу на {group_name}")
    
def get_total_user_count():
    """Gets the total number of users in the database"""
    conn = get_db_connection()
    count = conn.execute('SELECT COUNT(*) FROM users').fetchone()[0]
    conn.close()
    return count
    
def delete_homework(hw_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM homeworks WHERE id = ?', (hw_id,))
    conn.commit()
    conn.close()

def delete_notification(notif_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM notifications WHERE id = ?', (notif_id,))
    conn.commit()
    conn.close()

def delete_sport_notification(notif_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM sport_notifications WHERE id = ?', (notif_id,))
    conn.commit()
    conn.close()

def delete_user(user_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} удален из базы данных.")

def delete_suggestion(suggestion_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM suggestions WHERE id = ?', (suggestion_id,))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Предложение {suggestion_id} удалено из базы данных.")

def get_all_sport_notifications():
    """Gets all sport notifications"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT s.*, u.first_name 
                                 FROM sport_notifications s JOIN users u ON s.added_by = u.user_id 
                                 ORDER BY s.created_at DESC''').fetchall()
    conn.close()
    return notifications

# -------------------- SCHEDULE FUNCTIONS --------------------

def fetch_schedule_data():
    """Fetches schedule data from the website"""
    try:
        url = "https://pmk-online.ru/students/schedule/"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        html = resp.text

        match = re.search(r"const scheduleData\s*=\s*(\{.*?\});", html, re.S)
        if not match:
            print("ОШИБКА: Не удалось найти scheduleData на сайте.")
            return None

        schedule_raw = match.group(1)
        schedule_json_str = schedule_raw.replace(";", "")
        return json.loads(schedule_json_str)
    
    except Exception as e:
        print(f"ОШИБКА: Не удалось загрузить расписание: {e}")
        return None

def normalize_lesson(lesson_new_format):
    """Преобразует пару из нового формата в старый, понятный боту."""
    try:
        # Ключи из нового формата
        start_time_utc_str = lesson_new_format.get("o7OUjsQh")
        end_time_utc_str = lesson_new_format.get("d4UdBHV7")

        if not start_time_utc_str:
            return None # Пропускаем, если нет времени начала

        # Конвертируем время в часовой пояс Екатеринбурга
        start_time_utc = datetime.fromisoformat(start_time_utc_str.replace('Z', '+00:00'))
        end_time_utc = datetime.fromisoformat(end_time_utc_str.replace('Z', '+00:00'))
        
        start_time_yekat = start_time_utc.astimezone(YEKATERINBURG_TZ)
        end_time_yekat = end_time_utc.astimezone(YEKATERINBURG_TZ)

        # Создаем словарь в "старом" формате, который понимает остальной код
        normalized = {
            # Ключ 'date' теперь хранит полную дату и время начала для фильтрации
            'date': start_time_utc_str, 
            'lessonNumber': lesson_new_format.get("M5YIzu1f"),
            'subjectFull': lesson_new_format.get("gbeTv7Dy", "N/A"),
            'teacher': lesson_new_format.get("5ZnFq6xT", "N/A"),
            'room': lesson_new_format.get("T7wLN7sY", "N/A"),
            # Добавляем отформатированное время для удобного вывода
            'start_time': start_time_yekat.strftime('%H:%M'),
            'end_time': end_time_yekat.strftime('%H:%M')
        }
        return normalized
    except Exception as e:
        print(f"ОШИБКА: Не удалось нормализовать пару: {e}, данные: {lesson_new_format}")
        return None

def filter_today_lessons(lessons):
    """Filters lessons for today considering Yekaterinburg time"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    return [lesson for lesson in lessons if lesson.get('date') and datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() == today_yekat]

def filter_tomorrow_lessons(lessons):
    """Filters lessons for tomorrow considering Yekaterinburg time"""
    tomorrow_yekat = (datetime.now(YEKATERINBURG_TZ) + timedelta(days=1)).date()
    return [lesson for lesson in lessons if lesson.get('date') and datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() == tomorrow_yekat]

def filter_week_lessons(lessons):
    """Filters lessons for the week considering Yekaterinburg time"""
    today_yekat = datetime.now(YEKATERINBURG_TZ).date()
    week_end = today_yekat + timedelta(days=7)
    return [lesson for lesson in lessons if lesson.get('date') and today_yekat <= datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).date() <= week_end]

def get_lesson_time(lesson_number, day_of_week):
    """Returns the time of a lesson by its number, adjusted for Saturday"""
    # Standard schedule (Monday-Friday)
    lesson_times = {
        1: ("08:30", "10:05"), 2: ("10:15", "11:50"), 3: ("12:40", "14:15"),
        4: ("14:25", "16:00"), 5: ("16:10", "17:45"), 6: ("17:55", "19:30"),
    }
    # Saturday schedule
    saturday_times = {
        1: ("8:30", "9:45"), 2: ("9:55", "11:10"), 3: ("11:20", "12:40"), 
        4: ("13:20", "14:35"), 5: ("14:45", "16:00"), 6: ("16:10", "17:25")
    }

    if day_of_week == 5: # 5 is Saturday
        return saturday_times.get(lesson_number, ("❓", "❓"))
    else:
        return lesson_times.get(lesson_number, ("❓", "❓"))

def format_schedule(lessons, title):
    if not lessons:
        return "✅ Нет занятий"
    
    lessons.sort(key=lambda x: x.get('date', ''))
    
    result = [f"<b>{title}</b>\n"]
    current_date = None
    for lesson in lessons:
        try:
            lesson_date_utc = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00'))
            lesson_date_yekat = lesson_date_utc.astimezone(YEKATERINBURG_TZ)
            date_str = lesson_date_yekat.strftime('%d.%m.%Y')
            
            if date_str != current_date:
                current_date = date_str
                day_names = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
                day_of_week_num = lesson_date_yekat.weekday()
                day_of_week = day_names[day_of_week_num]
                result.append(f"\n📅 <b>{date_str} ({day_of_week})</b>")
            
            lesson_number = lesson.get('lessonNumber', 0)
            
            start_time = lesson.get('start_time', '❓')
            end_time = lesson.get('end_time', '❓')
            
            lesson_text = (
                f"    ⏰ {start_time}-{end_time} | {lesson_number} пара\n"
                f"    📚 {lesson.get('subjectFull', 'N/A')}\n"
                f"    👨‍🏫 {lesson.get('teacher', 'N/A')}\n"
                f"    🚪 {lesson.get('room', 'N/A')}\n"
            )
            result.append(lesson_text)
        except Exception as e:
            print(f"ОШИБКА: Не удалось отформатировать пару: {e}")
            continue
    
    result.append(f"\n📊 <b>Всего занятий:</b> {len(lessons)}")
    return "\n".join(result)

def get_schedule(period, group_name):
    """Gets and formats the schedule for the selected period and group"""
    try:
        global schedule_cache, last_schedule_check
        
        now = datetime.now(YEKATERINBURG_TZ)
        if last_schedule_check is None or (now - last_schedule_check).total_seconds() > 3600:
            schedule_data_raw = fetch_schedule_data()
            if schedule_data_raw:
                normalized_schedule = {}
                for group, lessons in schedule_data_raw.items():
                    normalized_lessons = [normalize_lesson(l) for l in lessons]
                    normalized_schedule[group] = [l for l in normalized_lessons if l is not None]
                
                schedule_cache = normalized_schedule
                last_schedule_check = now
                print("ЛОГ: Расписание обновлено из интернета и нормализовано")
            else:
                print("ЛОГ: Не удалось обновить расписание, используем кэш")
        else:
            print("ЛОГ: Используем кэшированное расписание")
        
        schedule_data = schedule_cache

        if not schedule_data:
            return "❌ Не удалось загрузить расписание"

        if group_name not in schedule_data:
            return f"❌ Нет расписания для группы {group_name}"

        lessons = schedule_data[group_name]
        
        if period == '📅 Сегодня':
            filtered_lessons = filter_today_lessons(lessons)
            title = f"📅 Расписание на сегодня ({group_name})"
        elif period == '📅 Завтра':
            filtered_lessons = filter_tomorrow_lessons(lessons)
            title = f"📅 Расписание на завтра ({group_name})"
        elif period == '📅 Неделя':
            filtered_lessons = filter_week_lessons(lessons)
            title = f"📅 Расписание на неделю ({group_name})"
        else:
            filtered_lessons = lessons
            title = f"📅 Все расписание ({group_name})"

        if not filtered_lessons:
            return f"✅ Нет занятий для выбранного периода."

        return format_schedule(filtered_lessons, title)

    except Exception as e:
        print(f"ОШИБКА: Произошла ошибка при получении расписания: {str(e)}")
        return f"❌ Произошла ошибка: {str(e)}"

async def check_schedule_changes(context: ContextTypes.DEFAULT_TYPE):
    """Checks for schedule changes and notifies users with diff"""
    global schedule_cache, last_schedule_check
    
    print("ЛОГ: Проверка изменений в расписании...")
    new_schedule_raw = fetch_schedule_data()
    
    if not new_schedule_raw:
        print("ЛОГ: Не удалось проверить изменения расписания")
        return

    new_schedule = {}
    for group, lessons in new_schedule_raw.items():
        normalized_lessons = [normalize_lesson(l) for l in lessons]
        new_schedule[group] = [l for l in normalized_lessons if l is not None]

    for group_name in new_schedule.keys():
        old_lessons = schedule_cache.get(group_name, [])
        new_lessons = new_schedule.get(group_name, [])
        
        old_set = set(json.dumps(lesson, sort_keys=True) for lesson in old_lessons)
        new_set = set(json.dumps(lesson, sort_keys=True) for lesson in new_lessons)
        
        added_lessons_json = new_set - old_set
        removed_lessons_json = old_set - new_set
        
        if added_lessons_json or removed_lessons_json:
            print(f"ЛОГ: Обнаружены изменения в расписании для группы {group_name}")
            
            change_message = f"🔄 <b>Обновление расписания для группы {group_name}</b>\n\n"
            
            if added_lessons_json:
                change_message += "🟢 <b>Добавлено:</b>\n"
                for lesson_json in added_lessons_json:
                    lesson = json.loads(lesson_json)
                    date_str = datetime.fromisoformat(lesson.get('date').replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).strftime('%d.%m %H:%M')
                    change_message += f"- {date_str} | {lesson.get('subjectFull')}\n"
            
            if removed_lessons_json:
                if added_lessons_json:
                    change_message += "\n"
                change_message += "🔴 <b>Удалено:</b>\n"
                for lesson_json in removed_lessons_json:
                    lesson = json.loads(lesson_json)
                    date_str = datetime.fromisoformat(lesson.get('date').replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ).strftime('%d.%m %H:%M')
                    change_message += f"- {date_str} | {lesson.get('subjectFull')}\n"
            
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(
                        user['user_id'],
                        change_message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить уведомление пользователю {user['user_id']}: {e}")

    schedule_cache = new_schedule
    last_schedule_check = datetime.now(YEKATERINBURG_TZ)

async def send_daily_schedule(context: ContextTypes.DEFAULT_TYPE):
    """Sends daily schedule at 19:00"""
    print("ЛОГ: Отправка ежедневного расписания...")
    
    all_groups = list(schedule_cache.keys())
    for group_name in all_groups:
        lessons = schedule_cache.get(group_name)
        if not lessons:
            continue

        tomorrow_lessons = filter_tomorrow_lessons(lessons)
        
        if tomorrow_lessons:
            schedule_text = format_schedule(tomorrow_lessons, f"📅 Расписание на завтра ({group_name})")
            
            homeworks = get_homeworks(group_name)
            if homeworks:
                homework_text = "\n\n📝 <b>Домашние задания:</b>\n"
                for hw in homeworks[:3]:
                    homework_text += f"• {hw['subject']}: {hw['task']} (до {hw['deadline']})\n"
                schedule_text += homework_text
            
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(user['user_id'], schedule_text, parse_mode='HTML')
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить расписание пользователю {user['user_id']}: {e}")

async def send_morning_schedule(context: ContextTypes.DEFAULT_TYPE):
    """Sends morning schedule at 07:00"""
    print("ЛОГ: Отправка утреннего расписания...")
    
    all_groups = list(schedule_cache.keys())
    for group_name in all_groups:
        lessons = schedule_cache.get(group_name)
        if not lessons:
            continue

        today_lessons = filter_today_lessons(lessons)
        
        if today_lessons:
            schedule_text = format_schedule(today_lessons, f"📅 Расписание на сегодня ({group_name})")
            
            users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
            for user in users:
                try:
                    await context.bot.send_message(user['user_id'], schedule_text, parse_mode='HTML')
                except Exception as e:
                    print(f"ОШИБКА: Не удалось отправить расписание пользователю {user['user_id']}: {e}")

async def check_next_lesson(context: ContextTypes.DEFAULT_TYPE):
    """Checks and sends notification about next lesson"""
    global schedule_cache, user_notification_cache
    
    print("ЛОГ: Проверка следующей пары...")
    
    now = datetime.now(YEKATERINBURG_TZ)
    today_date = now.date()
    
    users_with_groups = get_db_connection().execute('SELECT user_id, group_name FROM users').fetchall()
    
    for user in users_with_groups:
        user_id = user['user_id']
        group_name = user['group_name']
        
        lessons = schedule_cache.get(group_name)
        if not lessons:
            continue

        today_lessons = filter_today_lessons(lessons)
        
        if not today_lessons:
            continue
            
        for i, lesson in enumerate(today_lessons):
            try:
                lesson_number = lesson.get('lessonNumber', 0)
                notification_key = f"{user_id}_{today_date}_{lesson_number}"
                
                if user_notification_cache.get(notification_key) is True:
                    continue

                start_time_aware = datetime.fromisoformat(lesson['date'].replace('Z', '+00:00')).astimezone(YEKATERINBURG_TZ)
                
                if now + timedelta(minutes=5) >= start_time_aware and now < start_time_aware:
                    start_time = lesson.get('start_time', '❓')
                    end_time = lesson.get('end_time', '❓')

                    next_lesson_text = (
                        f"📅 <b>Начало следующей пары через 5 минут ({group_name})</b>\n\n"
                        f"    ⏰ {start_time}-{end_time} | {lesson_number} пара\n"
                        f"    📚 {lesson.get('subjectFull', 'N/A')}\n"
                        f"    👨‍🏫 {lesson.get('teacher', 'N/A')}\n"
                        f"    🚪 {lesson.get('room', 'N/A')}\n"
                    )
                    
                    try:
                        await context.bot.send_message(user_id, next_lesson_text, parse_mode='HTML')
                        user_notification_cache[notification_key] = True
                    except Exception as e:
                        print(f"ОШИБКА: Не удалось отправить уведомление о следующей паре пользователю {user_id}: {e}")

            except Exception as e:
                print(f"ОШИБКА: Не удалось обработать пару: {e}")
                continue

    if now.hour == 0 and now.minute < 2:
        print("ЛОГ: Очистка кэша уведомлений...")
        user_notification_cache.clear()

# -------------------- CORE BOT FUNCTIONS --------------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for the /start command"""
    user = update.effective_user
    user_id = user.id
    
    add_user(user_id, user.username, user.first_name, user.last_name)
    user_data = get_user(user_id)
    
    if not user_data or user_data['group_name'] not in ALL_GROUPS:
        return await ask_user_group(update, context)

    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user.id}) вернулся в главное меню.")
    
    if user_id in SPECIAL_USERS and user_data['role'] != SPECIAL_USERS[user_id]['role']:
        keyboard = [[InlineKeyboardButton("🔄 Принудительно исправить роль", callback_data=f"fix_role_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "⚠️ Обнаружено несоответствие роли. Нажмите кнопку ниже, чтобы исправить:",
            reply_markup=reply_markup
        )
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def ask_user_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks the user to select their group"""
    keyboard = [ALL_GROUPS[i:i+3] for i in range(0, len(ALL_GROUPS), 3)]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    message_source = update.callback_query.message if update.callback_query else update.message
    await message_source.reply_text(
        "👋 Выбери свою группу:",
        reply_markup=reply_markup
    )
    
    return AWAITING_GROUP

async def handle_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the user's group selection and ends the conversation"""
    user = update.effective_user
    user_id = user.id
    group_name = update.message.text
    
    if group_name not in ALL_GROUPS:
        await update.message.reply_text(
            "❌ Пожалуйста, выбери группу из списка:",
            reply_markup=ReplyKeyboardMarkup([ALL_GROUPS[i:i+3] for i in range(0, len(ALL_GROUPS), 3)], 
                                           resize_keyboard=True, one_time_keyboard=True)
        )
        print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) ввел неверную группу: {group_name}")
        return AWAITING_GROUP
    
    update_user_group(user_id, group_name)
    
    await update.message.reply_text(
        f"✅ Группа {group_name} сохранена!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) успешно выбрал группу {group_name}.")
    return ConversationHandler.END

async def show_main_menu(update: Update, user_id: int):
    """Displays the main menu based on user rights"""
    user_data = get_user(user_id)
    role = user_data['role']
    
    welcome_text = "👋 Добро пожаловать!"
    
    if user_id in SPECIAL_USERS:
        welcome_text = f"👑 Добро пожаловать, {SPECIAL_USERS[user_id]['name']}!"
    elif role == ROLE_IT_SPECIALIST:
        welcome_text = "👑 Добро пожаловать, Айтишник!"
    elif role == ROLE_PHYSICAL_ORGANIZER:
        welcome_text = "🏃 Добро пожаловать, Физ. орг.!"

    if user_id == DEVELOPER_ID:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['📢 Отправить ДЗ', '📢 Отправить уведомление'],
            ['Удалить ДЗ', 'Удалить уведомление', 'Удалить предложения'],
            ['Удалить пользователя', 'Удалить спортивные уведомления', 'Список пользователей'],
            ['💰 Дать денюжку', '🔔 Расписание звонков'],
            ['🎓 Сменить группу']
        ]
    elif role == ROLE_IT_SPECIALIST:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['📢 Отправить ДЗ', '📢 Отправить уведомление'],
            ['Удалить ДЗ', 'Удалить уведомление', 'Удалить предложения'],
            ['💰 Дать денюжку', '🔔 Расписание звонков'],
            ['🎓 Сменить группу']
        ]
    elif role == ROLE_PHYSICAL_ORGANIZER:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложения', '💡 Предложить идею'],
            ['🏃 Отправить спортивное уведомление', 'Удалить спортивные уведомления'],
            ['💰 Дать денюжку', '🔔 Расписание звонков'],
            ['🎓 Сменить группу']
        ]
    else:
        keyboard = [
            ['📅 Расписание', '📝 ДЗ'],
            ['ℹ️ Информация', '💡 Предложить идею'],
            ['💰 Дать денюжку'],
            ['📞 Связа со старостой', '📞 Связаться с замом старосты'],
            ['📞 Связаться с физоргом'],
            ['🎓 Сменить группу']
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    message_source = update.callback_query.message if update.callback_query else update.message
    await message_source.reply_text(welcome_text, reply_markup=reply_markup)

    print(f"ЛОГ: Главное меню показано для пользователя {user_data['first_name']} (ID: {user_id}).")

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancels the current conversation and returns to the main menu"""
    user = update.effective_user
    user_id = user.id
    
    await update.message.reply_text("Действие отменено.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Диалог отменен пользователем {user.first_name} (ID: {user_id}).")
    return ConversationHandler.END

async def handle_simple_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for simple text messages that don't require a conversation"""
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    user_data = get_user(user_id)
    
    print(f"ЛОГ: Пользователь {user.first_name} (ID: {user_id}) отправил сообщение: '{text}'")
    
    if not user_data or user_data['group_name'] not in ALL_GROUPS:
        add_user(user_id, user.username, user.first_name, user.last_name)
        await update.message.reply_text("Пожалуйста, нажми /start и выбери свою группу.")
        return

    role = user_data['role']
    group_name = user_data['group_name']
    
    if text == '📅 Расписание':
        await show_schedule_periods(update, user_id)
    
    elif text == '📝 ДЗ':
        await show_homework(update, group_name)
    
    elif text == 'ℹ️ Информация':
        await show_information(update, group_name, role)

    elif text == '💡 Предложения' and (role in [ROLE_IT_SPECIALIST, ROLE_PHYSICAL_ORGANIZER] or user_id in SPECIAL_USERS):
        await show_suggestions(update)
    
    elif text == 'Список пользователей' and user_id == DEVELOPER_ID:
        await show_users_list(update)

    elif text == '💰 Дать денюжку':
        donate_text = "Если не жалко, можешь дать разрабу бота денюжку на дальнейшее развитие бота и на покушать😊"
        keyboard = [
            [InlineKeyboardButton("💸 Поддержать автора", url="https://www.donationalerts.com/r/ax_hikitka")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(donate_text, reply_markup=reply_markup)

    elif text == '🔔 Расписание звонков':
        await show_call_schedule(update)
    
    elif text == '📞 Связаться с физоргом':
        await contact_physical_organizer(update)
    
    elif text == '📞 Связаться со старостой':
        await contact_starosta(update)

    elif text == '📞 Связаться с замом старосты':
        await contact_deputy_starosta(update)
    
    elif text in ['📅 Сегодня', '📅 Завтра', '📅 Неделя', '📅 Все расписание']:
        await handle_schedule_period(update, context, group_name)
    
    elif text == '🔙 Назад':
        await show_main_menu(update, user_id)

    elif text == 'Удалить пользователя' and user_id == DEVELOPER_ID:
        await delete_user_menu(update, context)

    elif text == 'Удалить спортивные уведомления' and (user_id == DEVELOPER_ID or role == ROLE_PHYSICAL_ORGANIZER):
        await delete_sport_notification_menu(update, context)
        
    elif text == 'Удалить предложения' and (user_id == DEVELOPER_ID or role == ROLE_IT_SPECIALIST):
        await delete_suggestions_menu(update, context)
        
    elif text == 'Удалить ДЗ' and (user_id == DEVELOPER_ID or role == ROLE_IT_SPECIALIST):
        await delete_homework_menu(update, context)

    elif text == 'Удалить уведомление' and (user_id == DEVELOPER_ID or role == ROLE_IT_SPECIALIST):
        await delete_notification_menu(update, context)

    else:
        await update.message.reply_text("Используй кнопки для навигации 👇")
        print(f"ЛОГ: Неизвестная команда от {user.first_name} (ID: {user_id}): '{text}'")

# -------------------- SCHEDULE DISPLAY FUNCTIONS --------------------

async def show_schedule_periods(update: Update, user_id: int):
    """Shows the schedule period selection"""
    keyboard = [
        ['📅 Сегодня', '📅 Завтра'],
        ['📅 Неделя', '📅 Все расписание'],
        ['🔙 Назад']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("Выбери период для просмотра расписания:", reply_markup=reply_markup)
    print(f"ЛОГ: Показан выбор периода расписания для пользователя {user_id}.")

async def handle_schedule_period(update: Update, context: ContextTypes.DEFAULT_TYPE, group_name: str):
    """Handles the schedule period selection"""
    text = update.message.text
    print(f"ЛОГ: Пользователь запросил расписание для периода '{text}'.")
    
    await update.message.reply_text("⏳ Загружаю расписание...", reply_markup=ReplyKeyboardRemove())
    schedule = get_schedule(text, group_name)
    await update.message.reply_text(schedule, parse_mode='HTML')
    await show_main_menu(update, update.effective_user.id)

# -------------------- DATABASE INTERACTION FUNCTIONS --------------------

def add_homework(subject, task, deadline, group_name, added_by, photo_id=None):
    """Adds homework to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO homeworks (subject, task, deadline, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?, ?, ?)''', (subject, task, deadline, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено ДЗ для группы {group_name}.")

def get_homeworks(group_name):
    """Gets homework for a group"""
    conn = get_db_connection()
    homeworks = conn.execute('''SELECT h.*, u.first_name 
                             FROM homeworks h JOIN users u ON h.added_by = u.user_id 
                             WHERE h.group_name = ? ORDER BY h.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return homeworks

def add_notification(message, group_name, added_by, photo_id=None):
    """Adds a notification to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO notifications (message, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?)''', (message, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено уведомление для группы {group_name}.")

def get_notifications(group_name):
    """Gets notifications for a group"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT n.*, u.first_name 
                                 FROM notifications n JOIN users u ON n.added_by = u.user_id 
                                 WHERE n.group_name = ? ORDER BY n.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return notifications

def add_sport_notification(message, group_name, added_by, photo_id=None):
    """Adds a sport notification to the database"""
    conn = get_db_connection()
    conn.execute('''INSERT INTO sport_notifications (message, group_name, added_by, photo_id)
                 VALUES (?, ?, ?, ?)''', (message, group_name, added_by, photo_id))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Добавлено спортивное уведомление для группы {group_name}.")

def get_sport_notifications(group_name):
    """Gets sport notifications for a group"""
    conn = get_db_connection()
    notifications = conn.execute('''SELECT s.*, u.first_name 
                                 FROM sport_notifications s JOIN users u ON s.added_by = u.user_id 
                                 WHERE s.group_name = ? ORDER BY s.created_at DESC''', (group_name,)).fetchall()
    conn.close()
    return notifications

def add_suggestion(user_id, message):
    """Adds a suggestion to the database"""
    conn = get_db_connection()
    conn.execute('INSERT INTO suggestions (user_id, message) VALUES (?, ?)', (user_id, message))
    conn.commit()
    conn.close()
    print(f"ЛОГ: Пользователь {user_id} отправил предложение.")

def get_suggestions():
    """Gets all suggestions"""
    conn = get_db_connection()
    suggestions = conn.execute('''SELECT s.*, u.first_name, u.username 
                               FROM suggestions s JOIN users u ON s.user_id = u.user_id 
                               ORDER BY s.created_at DESC''').fetchall()
    conn.close()
    return suggestions

# -------------------- MESSAGE SENDING (DIALOG) FUNCTIONS --------------------

async def ask_homework_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for homework details to send"""
    await update.message.reply_text(
        "📝 <b>Добавление нового ДЗ</b>\n\n"
        "Напиши в формате:\n"
        "<b>Предмет</b>\n"
        "<b>Задание</b>\n"
        "<b>Срок сдачи</b>\n\n"
        "Пример:\n"
        "Математика\n"
        "Решить задачи 1-10 на странице 45\n"
        "До 15.09\n\n"
        "Можно прикрепить фото к сообщению",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод ДЗ от пользователя {update.effective_user.id}.")
    return AWAITING_HOMEWORK

async def ask_notification_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for information to send to everyone"""
    await update.message.reply_text(
        "📢 <b>Отправка уведомления всем</b>\n\n"
        "Напиши уведомление, которое нужно отправить всем ученикам.\n"
        "Можно прикрепить фото к сообщению:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод уведомления от пользователя {update.effective_user.id}.")
    return AWAITING_INFO

async def ask_sport_notification_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for a sport notification to send"""
    await update.message.reply_text(
        "🏃 <b>Отправка спортивного уведомления</b>\n\n"
        "Напиши спортивное уведомление, которое нужно отправить всем ученикам.\n"
        "Можно прикрепить фото к сообщению:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод спортивного уведомления от пользователя {update.effective_user.id}.")
    return AWAITING_SPORT

async def ask_suggestion_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Asks for a suggestion to improve the bot"""
    await update.message.reply_text(
        "💡 <b>Предложение по улучшению бота</b>\n\n"
        "Напиши свое предложение по улучшению бота:\n\n"
        "Что бы ты хотел добавить или изменить?",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([['❌ Отмена']], resize_keyboard=True)
    )
    print(f"ЛОГ: Запрошен ввод предложения от пользователя {update.effective_user.id}.")
    return AWAITING_SUGGESTION

# --- UPDATED MESSAGE HANDLING FUNCTIONS IN DIALOGS ---

async def handle_homework_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_IT_SPECIALIST] and user_id != DEVELOPER_ID:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']
    
    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    text = update.message.caption if update.message.caption else update.message.text
    
    if text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not text:
        await update.message.reply_text("❌ Пожалуйста, добавь описание к ДЗ.")
        return AWAITING_HOMEWORK

    lines = text.strip().split('\n')
    if len(lines) >= 3:
        subject = lines[0].strip()
        task = lines[1].strip()
        deadline = lines[2].strip()
        
        add_homework(subject, task, deadline, group_name, user_id, photo_id)
        await update.message.reply_text("✅ ДЗ добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
        await send_homework_to_all(context.bot, subject, task, deadline, group_name, user_id, photo_id)
        print(f"ЛОГ: ДЗ добавлено пользователем {user_id} для группы {group_name}.")
        
        await show_main_menu(update, user_id)
        return ConversationHandler.END
    else:
        await update.message.reply_text("❌ Неправильный формат. Нужно 3 строки: предмет, задание, срок")
        return AWAITING_HOMEWORK

async def handle_notification_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_IT_SPECIALIST] and user_id != DEVELOPER_ID:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']
    
    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    message_text = update.message.caption if update.message.caption else update.message.text

    if message_text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not message_text:
        await update.message.reply_text("❌ Пожалуйста, добавь текст уведомления.")
        return AWAITING_INFO

    add_notification(message_text, group_name, user_id, photo_id)
    await update.message.reply_text("✅ Уведомление добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
    await send_notification_to_all(context.bot, message_text, group_name, user_id, photo_id)
    print(f"ЛОГ: Уведомление отправлено пользователем {user_id} для группы {group_name}.")
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def handle_sport_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    
    if user_id not in [uid for uid in SPECIAL_USERS if SPECIAL_USERS[uid]['role'] == ROLE_PHYSICAL_ORGANIZER] and user_id != DEVELOPER_ID:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return await cancel_conversation(update, context)

    group_name = user_data['group_name']

    photo_id = update.message.photo[-1].file_id if update.message.photo else None
    message_text = update.message.caption if update.message.caption else update.message.text

    if message_text == '❌ Отмена':
        return await cancel_conversation(update, context)

    if not message_text:
        await update.message.reply_text("❌ Пожалуйста, добавь текст спортивного уведомления.")
        return AWAITING_SPORT
    
    add_sport_notification(message_text, group_name, user_id, photo_id)
    await update.message.reply_text("✅ Спортивное уведомление добавлено и отправляется...", reply_markup=ReplyKeyboardRemove())
    await send_sport_notification_to_all(context.bot, message_text, group_name, user_id, photo_id)
    print(f"ЛОГ: Спортивное уведомление отправлено пользователем {user_id} для группы {group_name}.")
    
    await show_main_menu(update, user_id)
    return ConversationHandler.END

async def handle_suggestion_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    text = update.message.text

    if text == '❌ Отмена':
        return await cancel_conversation(update, context)
    
    if not text:
        await update.message.reply_text("❌ Пожалуйста, напиши свое предложение.")
        return AWAITING_SUGGESTION

    add_suggestion(user_id, text)
    
    for special_id in SPECIAL_USERS:
        try:
            await context.bot.send_message(
                special_id,
                f"💡 Новое предложение от {user_data['first_name']} (@{user_data['username']}):\n\n{text}"
            )
        except Exception as e:
            print(f"Не удалось отправить предложение пользователю {special_id}: {e}")
    
    await update.message.reply_text("✅ Спасибо за предложение! Мы его рассмотрим.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(update, user_id)
    print(f"ЛОГ: Пользователь {user_id} отправил предложение.")
    return ConversationHandler.END

# --- NOTIFICATION SENDING LOGIC ---

async def send_homework_to_all(bot, subject, task, deadline, group_name, added_by, photo_id=None):
    """Sends homework to all users in a group"""
    homework_text = (
        f"📝 <b>НОВОЕ ДОМАШНЕЕ ЗАДАНИЕ</b>\n\n"
        f"📚 <b>Предмет:</b> {subject}\n"
        f"📋 <b>Задание:</b> {task}\n"
        f"⏰ <b>Срок сдачи:</b> {deadline}\n"
        f"👥 <b>Группа:</b> {group_name}\n"
    )
    
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
    
    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=homework_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], homework_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить ДЗ пользователю {user['user_id']}: {e}")

async def send_notification_to_all(bot, message, group_name, added_by, photo_id=None):
    """Sends a notification to all users in a group"""
    notification_text = (f"📢 <b>ВАЖНОЕ УВЕДОМЛЕНИЕ</b>\n\n{message}\n\n👥 <b>Группа:</b> {group_name}")
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()
    
    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=notification_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], notification_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить уведомление пользователю {user['user_id']}: {e}")

async def send_sport_notification_to_all(bot, message, group_name, added_by, photo_id=None):
    """Sends a sport notification to all users in a group"""
    sport_text = (f"🏃 <b>СПОРТИВНОЕ УВЕДОМЛЕНИЕ</b>\n\n{message}\n\n👥 <b>Группа:</b> {group_name}")
    users = get_db_connection().execute('SELECT user_id FROM users WHERE group_name = ?', (group_name,)).fetchall()

    for user in users:
        try:
            if photo_id:
                await bot.send_photo(chat_id=user['user_id'], photo=photo_id, caption=sport_text, parse_mode='HTML')
            else:
                await bot.send_message(user['user_id'], sport_text, parse_mode='HTML')
        except Exception as e:
            print(f"ОШИБКА: Не удалось отправить спортивное уведомление пользователю {user['user_id']}: {e}")

# -------------------- INFO DISPLAY FUNCTIONS --------------------

async def show_homework(update: Update, group_name: str):
    """Shows all homework for a group"""
    homeworks = get_homeworks(group_name)
    if not homeworks:
        await update.message.reply_text("📭 Пока нет домашних заданий")
        return
    
    for hw in homeworks:
        hw_text = (
            f"📝 <b>Домашнее задание</b>\n"
            f"📚 <b>Предмет:</b> {hw['subject']}\n"
            f"📋 <b>Задание:</b> {hw['task']}\n"
            f"⏰ <b>Срок:</b> {hw['deadline']}\n"
            f"👤 <b>Добавил:</b> {hw['first_name']}\n"
            f"📅 <b>Дата:</b> {datetime.fromisoformat(hw['created_at']).strftime('%d.%m.%Y %H:%M')}"
        )
        if hw['photo_id']:
            await update.message.reply_photo(photo=hw['photo_id'], caption=hw_text, parse_mode='HTML')
        else:
            await update.message.reply_text(hw_text, parse_mode='HTML')
    
    await update.message.reply_text(f"📊 <b>Показано:</b> {len(homeworks)} заданий", parse_mode='HTML')

async def show_information(update: Update, group_name: str, role: str):
    """Shows information for the user"""
    user_count = get_total_user_count()
    info_text = f"📊 <b>Пользователей в боте:</b> {user_count}\n\n<b>Контакты:</b>\n"
    for data in SPECIAL_USERS.values():
        info_text += f"- <b>{data['name']}</b>: {data['username']}\n"
    await update.message.reply_text(info_text, parse_mode='HTML')

    notifications = get_notifications(group_name)
    sport_notifications = get_sport_notifications(group_name)
    if not notifications and not sport_notifications:
        await update.message.reply_text("📭 Пока нет уведомлений")
        return
    
    if notifications:
        await update.message.reply_text("📢 <b>Важные уведомления:</b>", parse_mode='HTML')
        for notif in notifications[:2]:
            notif_text = f"{notif['message']}\n\n👤 <b>От:</b> {notif['first_name']} | 📅 {datetime.fromisoformat(notif['created_at']).strftime('%d.%m.%Y')}"
            if notif['photo_id']:
                await update.message.reply_photo(photo=notif['photo_id'], caption=notif_text)
            else:
                await update.message.reply_text(notif_text)
    
    if sport_notifications:
        await update.message.reply_text("🏃 <b>Спортивные уведомления:</b>", parse_mode='HTML')
        for sport in sport_notifications[:2]:
            sport_text = f"{sport['message']}\n\n👤 <b>От:</b> {sport['first_name']} | 📅 {datetime.fromisoformat(sport['created_at']).strftime('%d.%m.%Y')}"
            if sport['photo_id']:
                await update.message.reply_photo(photo=sport['photo_id'], caption=sport_text)
            else:
                await update.message.reply_text(sport_text)

async def show_suggestions(update: Update):
    """Shows suggestions from students"""
    suggestions = get_suggestions()
    if not suggestions:
        await update.message.reply_text("📭 Пока нет предложений от учеников")
        return
    
    suggestions_text = "💡 <b>Предложения от учеников</b>\n\n"
    for i, s in enumerate(suggestions[:5], 1):
        username = f"@{s['username']}" if s['username'] else s['first_name']
        suggestions_text += f"{i}. {s['message']}\n👤 {username} | 📅 {datetime.fromisoformat(s['created_at']).strftime('%d.%m.%Y')}\n\n"
    await update.message.reply_text(suggestions_text, parse_mode='HTML')

async def show_users_list(update: Update):
    """Shows a list of all users for the developer"""
    users = get_all_users()
    if not users:
        await update.message.reply_text("❌ В базе данных нет пользователей.")
        return
    
    user_list_text = "👥 **Список пользователей**\n\n"
    
    for user in users:
        username = user['username'] if user['username'] else "Нет юзернейма"
        user_list_text += (
            f"**Имя:** {user['first_name']}\n"
            f"**Группа:** {user['group_name']}\n"
            f"**Юзер:** @{username}\n"
            f"**ID:** `{user['user_id']}`\n\n"
        )
    
    await update.message.reply_text(user_list_text, parse_mode='Markdown')

async def show_call_schedule(update: Update):
    """Shows the call schedule (звонки) based on day of week"""
    now = datetime.now(YEKATERINBURG_TZ)
    day_of_week = now.weekday()
    
    if day_of_week == 5:  # Saturday
        schedule_text = (
            "🔔 **Расписание звонков на субботу**\n\n"
            "1 пара: **8:30 - 9:45**\n"
            "Перемена: 10 минут\n"
            "2 пара: **9:55 - 11:10**\n"
            "Перемена: 10 минут\n"
            "3 пара: **11:20 - 12:40**\n"
            "Перемена: 40 минут - ОБЕД\n"
            "4 пара: **13:20 - 14:35**\n"
            "Перемена: 10 минут\n"
            "5 пара: **14:45 - 16:00**\n"
            "Перемена: 10 минут\n"
            "6 пара: **16:10 - 17:25**\n"
        )
    else:
        schedule_text = (
            "🔔 **Расписание звонков (понедельник-пятница)**\n\n"
            "1 пара: **8:30 - 10:05**\n"
            "Перемена: 10 минут\n"
            "2 пара: **10:15 - 11:50**\n"
            "Перемена: 10 минут\n"
            "3 пара: **12:40 - 14:15**\n"
            "Перемена: 40 минут - ОБЕД\n"
            "4 пара: **14:25 - 16:00**\n"
            "Перемена: 10 минут\n"
            "5 пара: **16:10 - 17:45**\n"
            "Перемена: 10 минут\n"
            "6 пара: **17:55 - 19:30**\n"
        )
    
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def contact_physical_organizer(update: Update):
    """Contact the physical organizer"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['role'] == ROLE_PHYSICAL_ORGANIZER), None)
    if username:
        await update.message.reply_text(f"🏃 <b>Связь с Физ. оргом</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Физ. орг. не найден")

async def contact_starosta(update: Update):
    """Contact the староста"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['name'] == 'Староста'), None)
    if username:
        await update.message.reply_text(f"👑 <b>Связь со старостой</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Староста не найден")

async def contact_deputy_starosta(update: Update):
    """Contact the зам старосты"""
    username = next((data['username'] for data in SPECIAL_USERS.values() if data['name'] == 'Зам Старосты'), None)
    if username:
        await update.message.reply_text(f"👑 <b>Связь с замом старосты (разработчиком)</b>\n\n📞 Telegram: {username}", parse_mode='HTML')
    else:
        await update.message.reply_text("❌ Зам старосты не найден")

# -------------------- DELETION FUNCTIONS --------------------

async def delete_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_IT_SPECIALIST):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    homeworks = get_homeworks(user_data['group_name'])
    if not homeworks:
        await update.message.reply_text("📝 Нет домашних заданий для удаления.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(f"❌ {hw['subject']} | {hw['deadline']}", callback_data=f"del_hw_{hw['id']}")] for hw in homeworks[:5]]
    await update.message.reply_text("Выберите ДЗ для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_HOMEWORK_DELETE

async def delete_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_IT_SPECIALIST):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    user_data = get_user(user_id)
    notifications = get_notifications(user_data['group_name'])
    sport_notifications = get_sport_notifications(user_data['group_name'])
    
    if not notifications and not sport_notifications:
        await update.message.reply_text("📢 Нет уведомлений для удаления.")
        return ConversationHandler.END

    keyboard = []
    for n in notifications[:5]:
        button_text = f"📢 {n['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_notif_{n['id']}")])
    
    for s in sport_notifications[:5]:
        button_text = f"🏃 {s['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_sport_{s['id']}")])

    await update.message.reply_text("Выберите уведомление для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_INFO_DELETE

async def delete_sport_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] != ROLE_PHYSICAL_ORGANIZER):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    if user_id == DEVELOPER_ID:
        sport_notifications = get_all_sport_notifications()
    else:
        sport_notifications = get_sport_notifications(user_data['group_name'])

    if not sport_notifications:
        await update.message.reply_text("🏃 Нет спортивных уведомлений для удаления.")
        return ConversationHandler.END

    keyboard = []
    for sport in sport_notifications[:10]:
        button_text = f"🏃 {sport['message'][:20]}..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"del_sport_{sport['id']}")])

    await update.message.reply_text("Выберите спортивное уведомление для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_SPORT_DELETE

async def delete_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != DEVELOPER_ID:
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    users = [u for u in get_all_users() if u['user_id'] not in SPECIAL_USERS]
    if not users:
        await update.message.reply_text("👥 Нет пользователей для удаления.")
        return ConversationHandler.END
        
    keyboard = [[InlineKeyboardButton(f"❌ {u['first_name']} (@{u['username']}) - Группа: {u['group_name']} - ID: {u['user_id']}", callback_data=f"del_user_{u['user_id']}")] for u in users]
    await update.message.reply_text("Выберите пользователя для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_USER_DELETE

async def delete_suggestions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_id != DEVELOPER_ID and (not user_data or user_data['role'] not in [ROLE_IT_SPECIALIST, ROLE_PHYSICAL_ORGANIZER]):
        await update.message.reply_text("У вас нет прав для этого действия.")
        return ConversationHandler.END
        
    suggestions = get_suggestions()
    if not suggestions:
        await update.message.reply_text("💡 Нет предложений для удаления.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(f"❌ {s['message'][:20]}...", callback_data=f"del_sugg_{s['id']}")] for s in suggestions[:5]]
    await update.message.reply_text("Выберите предложение для удаления:", reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_SUGGESTION_DELETE

async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    action = parts[0]
    data_type = parts[1]
    item_id = int(parts[2])
    
    message = "❌ Произошла ошибка."
    try:
        if data_type == 'hw':
            delete_homework(item_id)
            message = "✅ Домашнее задание успешно удалено."
        elif data_type == 'notif':
            delete_notification(item_id)
            message = "✅ Уведомление успешно удалено."
        elif data_type == 'sport':
            delete_sport_notification(item_id)
            message = "✅ Спортивное уведомление успешно удалено."
        elif data_type == 'user':
            delete_user(item_id)
            message = "✅ Пользователь успешно удален."
        elif data_type == 'sugg':
            delete_suggestion(item_id)
            message = "✅ Предложение успешно удалено."
        
        await query.edit_message_text(text=message)
    except Exception as e:
        await query.edit_message_text(text=f"❌ Ошибка при удалении: {e}")
    
    await show_main_menu(update, query.from_user.id)
    return ConversationHandler.END

# -------------------- ROLE FIX FUNCTION --------------------

async def handle_role_fix_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the role fix callback"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    user_id = int(parts[2])
    
    if query.from_user.id != user_id:
        await query.edit_message_text("❌ Вы не можете исправить роль другого пользователя.")
        return
    
    user = query.from_user
    add_user(user_id, user.username, user.first_name, user.last_name)
    
    await query.edit_message_text("✅ Ваша роль была обновлена! Теперь у вас должны быть все права.")
    await show_main_menu(update, user_id)

# -------------------- JOB QUEUE FUNCTIONS --------------------

async def init_schedule_cache(application):
    """Initializes the schedule cache"""
    global schedule_cache, last_schedule_check
    schedule_data_raw = fetch_schedule_data()
    if schedule_data_raw:
        normalized_schedule = {}
        for group, lessons in schedule_data_raw.items():
            normalized_lessons = [normalize_lesson(l) for l in lessons]
            normalized_schedule[group] = [l for l in normalized_lessons if l is not None]
        schedule_cache = normalized_schedule
        last_schedule_check = datetime.now(YEKATERINBURG_TZ)
        print("ЛОГ: Кэш расписания инициализирован и нормализован")

# -------------------- MAIN FUNCTION --------------------

def main():
    """Main function to run the bot"""
    init_db()
    
    app = Application.builder().token(BOT_TOKEN).post_init(init_schedule_cache).build()
    
    job_queue = app.job_queue
    job_queue.run_repeating(check_schedule_changes, interval=3600, first=10)
    job_queue.run_daily(send_daily_schedule, time=time(hour=19, minute=0, tzinfo=YEKATERINBURG_TZ), days=(0, 1, 2, 3, 4, 5, 6))
    job_queue.run_daily(send_morning_schedule, time=time(hour=7, minute=0, tzinfo=YEKATERINBURG_TZ), days=(0, 1, 2, 3, 4, 5, 6))
    job_queue.run_repeating(check_next_lesson, interval=60, first=10)
    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command),
            MessageHandler(filters.Regex('^📢 Отправить ДЗ$'), ask_homework_details),
            MessageHandler(filters.Regex('^📢 Отправить уведомление$'), ask_notification_details),
            MessageHandler(filters.Regex('^🏃 Отправить спортивное уведомление$'), ask_sport_notification_details),
            MessageHandler(filters.Regex('^💡 Предложить идею$'), ask_suggestion_details),
            MessageHandler(filters.Regex('^Удалить ДЗ$'), delete_homework_menu),
            MessageHandler(filters.Regex('^Удалить уведомление$'), delete_notification_menu),
            MessageHandler(filters.Regex('^Удалить спортивные уведомления$'), delete_sport_notification_menu),
            MessageHandler(filters.Regex('^Удалить предложения$'), delete_suggestions_menu),
            MessageHandler(filters.Regex('^Удалить пользователя$'), delete_user_menu),
            MessageHandler(filters.Regex('^🎓 Сменить группу$'), ask_user_group),
        ],
        states={
            AWAITING_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_selection)],
            AWAITING_HOMEWORK: [MessageHandler(filters.TEXT | filters.PHOTO, handle_homework_input)],
            AWAITING_INFO: [MessageHandler(filters.TEXT | filters.PHOTO, handle_notification_input)],
            AWAITING_SPORT: [MessageHandler(filters.TEXT | filters.PHOTO, handle_sport_input)],
            AWAITING_SUGGESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_suggestion_input)],
            AWAITING_HOMEWORK_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_hw_')],
            AWAITING_INFO_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_notif_')],
            AWAITING_SPORT_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_sport_')],
            AWAITING_USER_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_user_')],
            AWAITING_SUGGESTION_DELETE: [CallbackQueryHandler(handle_delete_callback, pattern='^del_sugg_')]
        },
        fallbacks=[
            CommandHandler('start', start_command),
            MessageHandler(filters.Regex('^❌ Отмена$'), cancel_conversation)
        ],
        allow_reentry=True
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_role_fix_callback, pattern='^fix_role_'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_simple_message))
    
    print("ЛОГ: Бот запущен!")
    app.run_polling()

if __name__ == "__main__":
    main()

