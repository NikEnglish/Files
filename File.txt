import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import numpy as np

class FieldApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Отображение границ для проектора")

        # Создаем canvas для отображения изображения
        self.canvas = tk.Canvas(root, width=1920, height=1200, bg="black")
        self.canvas.pack()

        # Диалог выбора изображения
        self.image_path = filedialog.askopenfilename(title="Выберите изображение", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])

        if not self.image_path:
            self.root.quit()  # Закрывает программу, если файл не был выбран
            return

        # Загружаем изображение
        self.original_image = Image.open(self.image_path)
        self.image = self.original_image
        self.photo = ImageTk.PhotoImage(self.image)

        # Отображаем изображение на канвасе
        self.canvas.create_image(0, 0, image=self.photo, anchor=tk.NW)

        # Масштаб и смещение для перемещения изображения
        self.scale = 1
        self.offset_x, self.offset_y = 0, 0

        self.canvas.bind("<B1-Motion>", self.on_drag)  # Перемещение изображения
        self.root.bind("<MouseWheel>", self.zoom)  # Масштабирование изображения

        # Обработка черных линий
        self.process_borders()

    def zoom(self, event):
        """Масштабирование изображения с помощью колесика мыши"""
        if event.delta > 0:
            self.scale *= 1.1
        else:
            self.scale /= 1.1

        new_size = (int(self.original_image.width * self.scale), int(self.original_image.height * self.scale))
        self.image = self.original_image.resize(new_size, Image.ANTIALIAS)
        self.photo = ImageTk.PhotoImage(self.image)

        self.canvas.create_image(self.offset_x, self.offset_y, image=self.photo, anchor=tk.NW)

    def on_drag(self, event):
        """Перемещение изображения на канвасе"""
        dx = event.x - self.offset_x
        dy = event.y - self.offset_y
        self.offset_x, self.offset_y = event.x, event.y
        self.canvas.create_image(self.offset_x, self.offset_y, image=self.photo, anchor=tk.NW)

    def process_borders(self):
        """Поиск черных линий и их подсветка на изображении"""
        image_data = np.array(self.image)

        # Предполагаем, что черные линии имеют низкие значения красного, зеленого и синего каналов
        for y in range(image_data.shape[0]):
            for x in range(image_data.shape[1]):
                r, g, b = image_data[y, x]
                if r < 50 and g < 50 and b < 50:  # Черные пиксели
                    self.canvas.create_oval(x, y, x+1, y+1, fill="black")

if __name__ == "__main__":
    root = tk.Tk()
    app = FieldApp(root)
    root.mainloop()
